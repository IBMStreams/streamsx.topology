<project name="streamsx.topology.test" default="all" basedir="."
    xmlns:jacoco="antlib:org.jacoco.ant"
    >
    <description>
        Testing
    </description>

  <import file="../../common-build.xml"/>


  <property name="topology.test.showoutput" value="no"/>
  <property name="topology.test.haltonfailure" value="yes"/>
  <property name="topology.test.threads" value="4"/>
	
  <property name="classes" location="classes"/>
  <property name="jarname" value="streamsx.topology.test.jar"/>
  <property name="test.dir" location="unittests"/>
  <property name="report.dir" location="report"/>
  <property name="topology.src.dir" location="../../java/src"/>
  <property name="samples.src.dir" location="../../samples/java/functional/src"/>
  <property name="testtk" location="../spl/testtk"/>
  <property name="testtk.java" location="${testtk}/impl/java"/>
  <property name="testtkopt" location="../spl/testtkopt"/>


  <makeurl file="${basedir}/log4j.properties" property="topology.log4j"/>


<!-- 
     This section allows the tests to be run against different
     streams installs and locations of the toolkit 

     topology.install.compile sets the location of the
     Streams install for compiling the test applications.

     The applications are still executed/submitted using $STREAMS_INSTALL

     topology.toolkit.release sets the location of the
     topology toolkit, defaulting to the codeline.
-->

    <property name="topology.install.compile" value="${env.STREAMS_INSTALL}"/>
    <echo message="Streams compile install: ${topology.install.compile}"/>

    <property name="topology.toolkit.release" location="${tk}" />
    <echo message="Topology toolkit release: ${topology.toolkit.release}"/>

   <property name="topology.toolkit.jar" location="${topology.toolkit.release}/lib/com.ibm.streamsx.topology.jar"/>
   <property name="topology.samples.jar" location="${topology.toolkit.release}/../samples/java/functional/functionalsamples.jar"/>

   <echo message="Topology test python: ${topology.test.python}"/>

   <echo message="Topology toolkit jar: ${topology.toolkit.jar}"/>
   <echo message="Topology toolkit samples jar: ${topology.samples.jar}"/>

<!-- End section for testing against different releases -->

  <path id="compile.classpath">
    <pathelement location="${topology.toolkit.jar}" />
    <pathelement location="${topology.samples.jar}"/>
    <pathelement location="resources/ThirdPartyResource.jar"/>
    <pathelement location="resources/classes/ThirdParty"/>
    <pathelement location="${testtk.java}/bin"/>
    <pathelement location="${junit.jar}"/>
    <pathelement location="${topology.install.compile}/lib/com.ibm.streams.operator.samples.jar"/>
  </path>

  <path id="test.base.classpath">
    <pathelement location="${jarname}" />
    <pathelement location="${topology.toolkit.jar}" />
    <pathelement location="resources/ThirdPartyResource.jar"/>
    <pathelement location="resources/classes/ThirdParty"/>
    <pathelement location="${testtk.java}/bin"/>
  </path>

  <path id="test.classpath">
    <path refid="test.base.classpath"/>
    <path refid="streams.classpath"/>
  </path>

  <path id="test.sample.classpath">
    <pathelement location="${topology.samples.jar}"/>
    <path refid="test.classpath"/>
  </path>

  <target name="all" depends="test.toolkit,jar"/>

  <target name="init">
    <mkdir dir="${classes}"/>
  </target>

  <target name="compile" depends="init,test.toolkit,test.toolkitopt">
    <javac debug="true" 
           includeantruntime="no"
	   srcdir="${basedir}/src" 
	   destdir="${classes}"
	   classpathref="compile.classpath"
	   excludes="**/VwapTest.java **/BundleSamplesTest.java"
	   />
    <ant dir="../scala" target="all" useNativeBasedir="true" inheritAll="no">
       <property name="topology.install.compile" value="${topology.install.compile}"/>
       <property name="topology.toolkit.release" value="${topology.toolkit.release}"/>
    </ant>
  </target>
  <target name="jar" depends="compile">
    <jar destfile="${jarname}" basedir="${classes}"/>
  </target>

  <target name="test.toolkit">
    <mkdir dir="${testtk.java}/bin"/>
    <mkdir dir="${testtk.java}/lib"/>
    <copy file="${topology.toolkit.jar}" todir="${testtk.java}/lib"/>
    <javac debug="true"
   	   srcdir="${testtk.java}/src"
   	   destdir="${testtk.java}/bin"
   	   classpathref="compile.classpath"
       includeantruntime="no"
   	   />
   <exec executable="${streams.install}/bin/spl-make-toolkit">
     <arg value="--make-operator"/>
     <arg value="-i"/>
     <arg value="${testtk}"/>
   </exec>
  </target>
  <target name="test.python.toolkit">
   <exec executable="${topology.test.python}">
     <arg value="${tk}/bin/spl-python-extract.py"/>
     <arg value="-i"/>
     <arg value="../python/spl/testtkpy"/>
     <arg value="--make-toolkit"/>
   </exec>
   </target>
	
  <target name="test.toolkit.clean">
  	<delete file="${testtk}/toolkit.xml"/>
  	<delete dir="${testtk}/testjava"/>
  	<delete dir="${testtk.java}/bin"/>
  	<delete dir="${testtk.java}/bin"/>
  </target>

  <target name="test.toolkitopt" depends="optional_types.check" if="optional_types.supported">
   <property name="topology.install.compile" value="${topology.install.compile}"/>
   <exec executable="${streams.install}/bin/spl-make-toolkit">
     <arg value="-i"/>
     <arg value="${testtkopt}"/>
   </exec>
  </target>
	
  <target name="test.toolkitopt.clean">
  	<delete file="${testtkopt}/toolkit.xml"/>
  </target>

  <target name="optional_types.check">
    <!-- This test assumes the fixpack ("F") is numeric, or not specified. -->
    <property name="required.product.version" value="4.3"/>
    <loadproperties srcFile="${streams.install}/.product" prefix="product">
      <filterchain>
        <linecontains>
          <contains value="Version"/>
        </linecontains>
      </filterchain>
    </loadproperties>
    <script language="javascript">
      <![CDATA[
        productVersion = project.getProperty("product.Version");
        requiredVersion = project.getProperty("required.product.version");
        hasMinimumVersion = true;
        vrmf = requiredVersion.split(".");
        pvrmf = productVersion.split(".");
        for (i = 0; i < vrmf.length; i++) {
          if (i > pvrmf.length) {
            hasMinimumVersion = false;
            break;
          }
          pn = parseInt(pvrmf[i]);
          rn = parseInt(vrmf[i]);
          if (pn < rn) {
            hasMinimumVersion = false;
            break;
          }
          if (pn > rn) {
            break;
          }
        }
        project.setProperty("has.required.product.version", hasMinimumVersion);
      ]]>
    </script>
    <condition property="optional_types.supported">
      <istrue value="${has.required.product.version}"/>
    </condition>
  </target>

  <target name="clean" depends="test.toolkit.clean,test.toolkitopt.clean">
    <delete dir="${classes}"/>
    <delete file="${jarname}"/>
    <delete dir="${test.dir}"/>
    <delete dir="${report.dir}"/>
  </target>

  <target name="unittest.quick">
     <property name="topology.test.sc_ok" value="false"/>
     <property name="topology.test.perf_ok" value="false"/>
     <property name="topology.test.coverage" value="false"/>
     <antcall target="unittest"/>
  </target>

  <target name="unittest" depends="unittest.main,unittest.standalone">
     <fail message="Unittests failed" if="topology.tests.failed"/>
  </target>

  <target name="unittest.main" depends="jar">
     <antcall target="unittest.base" inheritAll="no">
       <param name="topology.test.type" value="EMBEDDED_TESTER"/>
       <param name="topology.samples.jar" value="${topology.samples.jar}"/>
     </antcall>
  </target>

  <target name="unittest.standalone" depends="jar,test.python.toolkit">
     <antcall target="unittest.base" inheritAll="no">
       <param name="topology.test.type" value="STANDALONE_TESTER"/>
       <param name="topology.samples.jar" value="${topology.samples.jar}"/>
     </antcall>
  </target>

  <target name="unittest.distributed" depends="jar,test.python.toolkit">
     <antcall target="unittest.base" inheritAll="no">
       <param name="topology.test.type" value="DISTRIBUTED_TESTER"/>
     </antcall>
     <fail message="Unittests failed" if="topology.tests.failed"/>
  </target>
  <target name="unittest.streaminganalytics">
     <antcall target="unittest.base" inheritAll="no">
       <param name="topology.test.type" value="STREAMING_ANALYTICS_SERVICE_TESTER"/>
     </antcall>
     <fail message="Unittests failed" if="topology.tests.failed"/>
  </target>

  <target name="unittest.streaminganalytics.remote">
     <antcall target="unittest.base" inheritAll="no">
       <param name="topology.test.type" value="STREAMING_ANALYTICS_SERVICE_TESTER"/>
       <reference refid="test.base.classpath" torefid="test.classpath"/>
       <param name="streams.install" value=""/>
     </antcall>
     <fail message="Unittests failed" if="topology.tests.failed"/>
  </target>

  <target name="unittest.base.scala">
    <ant dir="../scala" target="unittest" useNativeBasedir="true" inheritAll="no">
     <property name="topology.test.type" value="${topology.test.type}"/>
     <property name="topology.install.compile" value="${topology.install.compile}"/>
     <property name="topology.toolkit.release" value="${topology.toolkit.release}"/>
    </ant>
  </target>

  <!-- Allow the pattern of tests to run be set
       ant -Dtopology.test.base.pattern='**/WindowTest.java'
  -->
  <property name="topology.test.base.pattern" value="**/*Test.java"/>

  <target name="unittest.base" depends="unittest.base.scala">
    <echo message="topology.samples.jar=${topology.samples.jar}"/>
     <mkdir dir="${test.dir}"/>
     <tempfile property="topology.test.dir" prefix="testrun" destDir="${test.dir}"/>
     <mkdir dir="${topology.test.dir}"/>
     <property name="topology.test.sc_ok" value="true"/>
     <property name="topology.test.perf_ok" value="true"/>
     <property name="topology.test.coverage" value="true"/>
     <property name="topology.test.resource_dir" location="resources"/>
   <echo message="PYTHONHOME:${topology.test.python.prefix}"/>
   <jacoco:coverage enabled="${topology.test.coverage}" destfile="${test.dir}/jacoco.exec">
     <junit fork="yes" dir="${topology.test.dir}" printsummary="yes" showoutput="${topology.test.showoutput}"
           threads="${topology.test.threads}"
           haltonfailure="${topology.test.haltonfailure}" failureproperty="topology.tests.failed">
       <env key="STREAMS_INSTALL" value="${streams.install}"/>
       <env key="PYTHONHOME" value="${topology.test.python.prefix}"/>
       <sysproperty key="topology.test.root" value="${topology.test.root}"/>
       <sysproperty key="topology.test.type" value="${topology.test.type}"/>
       <sysproperty key="topology.test.sc_ok" value="${topology.test.sc_ok}"/>
       <sysproperty key="topology.test.perf_ok" value="${topology.test.perf_ok}"/>
       <sysproperty key="topology.test.resource_dir" file="resources"/>
       <sysproperty key="topology.test.python" value="${topology.test.python}"/>
       <sysproperty key="topology.toolkit.release" value="${topology.toolkit.release}"/>
       <sysproperty key="topology.install.compile" value="${topology.install.compile}"/>
       <sysproperty key="log4j.configuration" value="${topology.log4j}"/>
       
       <classpath>
         <path refid="test.classpath"/>
       </classpath>
       <assertions><enable/></assertions>
       <formatter type="xml"/>
       <batchtest todir="${topology.test.dir}">
          <fileset dir="${basedir}/src" 
          	 excludes="**/samples/*Test.java **/rest/**" >
             <include name="${topology.test.base.pattern}"/>
          </fileset>
       </batchtest>
     </junit>
   </jacoco:coverage>
   <jacoco:coverage enabled="${topology.test.coverage}"  destfile="${test.dir}/jacoco.exec">
     <junit fork="yes" dir="${topology.test.dir}" printsummary="yes"
           threads="${topology.test.threads}"
           haltonfailure="${topology.test.haltonfailure}" failureproperty="topology.tests.failed">
       <env key="STREAMS_INSTALL" value="${streams.install}"/>
       <sysproperty key="topology.test.root" value="${topology.test.root}"/>
       <sysproperty key="topology.test.type" value="${topology.test.type}"/>
       <sysproperty key="topology.test.sc_ok" value="${topology.test.sc_ok}"/>
       <sysproperty key="topology.test.perf_ok" value="${topology.test.perf_ok}"/>
       <sysproperty key="topology.install.compile" value="${topology.install.compile}"/>
       <sysproperty key="log4j.configuration" value="${topology.log4j}"/>

       <classpath>
         <path refid="test.sample.classpath"/>
       </classpath>
       <assertions><enable/></assertions>
       <formatter type="xml"/>
       <batchtest todir="${topology.test.dir}">
          <fileset dir="${classes}">
             <include name="**/samples/*Test.class"/>
          </fileset>
       </batchtest>
     </junit>
   </jacoco:coverage>
   <fail message="Unittests failed">
       <condition>
          <and>
          <isset property="topology.tests.failed"/>
          <not>
              <!-- For Jenkins runs failing tests are tracked as unstable build -->
              <isset property="env.JENKINS_URL"/>
          </not>
          </and>
       </condition>
   </fail>
   </target>

  <target name="unittest.kafka.standalone">
     <property name="topology.test.type" value="STANDALONE_TESTER"/>
     <antcall target="unittest.kafka.base"/>
  </target>

  <target name="unittest.kafka.distributed">
     <property name="topology.test.type" value="DISTRIBUTED_TESTER"/>
     <antcall target="unittest.kafka.base"/>
  </target>

  <target name="unittest.kafka.base">
     <echo message="See com.ibm.streamsx.topology.test.messaging.kafka.package-info.java for required configuration information."/>
     <property name="topology.test.external.run" value="true"/>
     <property name="topology.test.showoutput" value="yes"/>
     <property name="topology.test.include.name" value="**/kafka/*Test.java"/>
     <antcall target="unittest.simple"/>
  	 <condition property="topology.test.isStandalone">
        <equals arg1="${topology.test.type}" arg2="STANDALONE_TESTER" />
  	 </condition>
  	 <antcall target="-warnOrphanedStandalone"/>
     <fail message="Unittests failed" if="topology.tests.failed"/>
  </target>
	
  <target name="-warnOrphanedStandalone" if="topology.test.isStandalone">
     <echo >REMEMBER TO LOCATE AND TERMINATE orphaned standalone processes.</echo>
  </target>

  <target name="unittest.mqtt.standalone">
     <property name="topology.test.type" value="STANDALONE_TESTER"/>
     <antcall target="unittest.mqtt.base"/>
  </target>
	 
  <target name="unittest.mqtt.distributed">
    <property name="topology.test.type" value="DISTRIBUTED_TESTER"/>
     <antcall target="unittest.mqtt.base"/>
  </target>

  <target name="unittest.mqtt.base">
     <echo message="See com.ibm.streamsx.topology.test.messaging.mqtt.package-info.java for required configuration information."/>
     <property name="topology.test.external.run" value="true"/>
     <property name="topology.test.showoutput" value="yes"/>
     <property name="topology.test.include.name" value="**/mqtt/*Test.java"/>
     <antcall target="unittest.simple"/>
     <fail message="Unittests failed" if="topology.tests.failed"/>
  </target>

  <target name="unittest.restapi">
     <mkdir dir="${test.dir}"/>
     <tempfile property="topology.test.dir" prefix="testrun" destDir="${test.dir}"/>
     <mkdir dir="${topology.test.dir}"/>
   <jacoco:coverage enabled="${topology.test.coverage}" destfile="${test.dir}/jacoco.exec">
     <junit fork="yes" dir="${topology.test.dir}" printsummary="yes" showoutput="${topology.test.showoutput}"
           threads="${topology.test.threads}"
           haltonfailure="${topology.test.haltonfailure}" failureproperty="topology.tests.failed">
       <sysproperty key="topology.test.root" value="${topology.test.root}"/>
       <sysproperty key="topology.test.resource_dir" file="resources"/>
       <sysproperty key="topology.toolkit.release" value="${topology.toolkit.release}"/>
       <sysproperty key="log4j.configuration" value="${topology.log4j}"/>

       <classpath>
         <path refid="test.classpath"/>
       </classpath>
       <assertions><enable/></assertions>
       <formatter type="xml"/>
       <batchtest todir="${topology.test.dir}">
          <fileset dir="${basedir}/src"
             excludes="**/samples/*Test.java" >
             <include name="**/rest/test/*Test.java"/>
          </fileset>
       </batchtest>
     </junit>
   </jacoco:coverage>
   <fail message="Unittests failed" if="topology.tests.failed"/>
   </target>


  <target name="unittest.simple" depends="jar">
     <mkdir dir="${test.dir}"/>
     <tempfile property="topology.test.dir" prefix="testrun" destDir="${test.dir}"/>
     <mkdir dir="${topology.test.dir}"/>
     <property name="topology.test.include.name" value="ERROR-CALLER-MUST-SPECIFY"/>
     <property name="topology.test.type" value="EMBEDDED_TESTER"/>
     <property name="topology.test.sc_ok" value="true"/>
     <property name="topology.test.perf_ok" value="true"/>
     <property name="topology.test.coverage" value="true"/>
     <property name="topology.test.resource_dir" location="resources"/>
     <property name="topology.test.external.run" value="false"/>
   <jacoco:coverage enabled="${topology.test.coverage}" destfile="${test.dir}/jacoco.exec">
     <junit fork="yes" dir="${topology.test.dir}" printsummary="yes" showoutput="${topology.test.showoutput}"
           haltonfailure="${topology.test.haltonfailure}" failureproperty="topology.tests.failed">
       <sysproperty key="topology.test.root" value="${topology.test.root}"/>
       <sysproperty key="topology.test.type" value="${topology.test.type}"/>
       <sysproperty key="topology.test.sc_ok" value="${topology.test.sc_ok}"/>
       <sysproperty key="topology.test.perf_ok" value="${topology.test.perf_ok}"/>
       <sysproperty key="topology.test.resource_dir" file="resources"/>
       <sysproperty key="topology.install.compile" value="${topology.install.compile}"/>
       <sysproperty key="topology.test.external.run" value="${topology.test.external.run}"/>
       <sysproperty key="log4j.configuration" value="${topology.log4j}"/>
       
       <classpath>
         <path refid="test.classpath"/>
       </classpath>
       <assertions><enable/></assertions>
       <formatter type="xml"/>
       <batchtest todir="${topology.test.dir}">
          <fileset dir="${basedir}/src">
             <include name="${topology.test.include.name}"/>
          </fileset>
       </batchtest>
     </junit>
   </jacoco:coverage>
   </target>

  <target name="junit.report" unless="topology.skip.junit.report">
   <junitreport todir="${test.dir}">
      <fileset dir="${test.dir}">
         <include name="**/TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${report.dir}/junit"/>
   </junitreport>
  </target>

  <target name="coverage.report" >
    <jacoco:report>
      <executiondata>
        <fileset dir="${test.dir}">
         <include name="**/jacoco*.exec"/>
        </fileset>
      </executiondata>
    <structure name="streamsx.topology">
      <classfiles>
          <file file="${tk.lib}/com.ibm.streamsx.topology.jar"/>
          <file file="${topology.samples.jar}"/>
      </classfiles>
      <sourcefiles encoding="UTF-8">
          <fileset dir="${topology.src.dir}"/>
          <fileset dir="${samples.src.dir}"/>
      </sourcefiles>
    </structure>
    <html destdir="${report.dir}/coverage"/>
    </jacoco:report>
  </target>

</project>

