/* Copyright (C) 2013-2014, International Business Machines Corporation */
/* All Rights Reserved */

<%
  my @includes = ("#include <FTPWrapper.h>");

  my $hasPasswordStream = $model->getNumberOfInputPorts() == 2;
  my $hasErrorStream = $model->getNumberOfOutputPorts() == 2;
%>

<%SPL::CodeGen::headerPrologue($model, \@includes);%>

class MY_OPERATOR : public MY_BASE_OPERATOR 
{
public:
  // Constructor
  MY_OPERATOR();

  // Destructor
  virtual ~MY_OPERATOR(); 

  // Notify pending shutdown
  void prepareToShutdown(); 

  // Tuple processing for non-mutating ports
  void process(Tuple const & tuple, uint32_t port);
  // Punct
  void process(Punctuation const & punctuation, uint32_t port);

private:
  com::ibm::streamsx::inet::ftp::FTPReaderWrapper * reader;
  
  uint32 sequence;

  std::string data;
  SPL::Mutex mutex;
  bool shutdown;

  //the callback function for the curl lib
  static size_t callback(void * buffer, size_t size, size_t count, void * stream);
  //calls this member function
  size_t writeToStream(void * buffer, size_t size, size_t count);
  //the function to send out data step by step
  void sendIntermediateTuples(IPort0Type const & iport$0); //send out read data tuples to port 0
  void sendLeftoverTuple(IPort0Type const & iport$0); //send out read data tuples to port 0
  OPort0Type generateOutTuple(char const * cp, size_t size, bool leftover, IPort0Type const & iport$0);
  void sendError(SPL::rstring const & reason, IPort0Type const & iport$0); 

  IPort0Type const * inTuple0; //transfer for output assignments
  //TODO max blocksize in lib
  //static const uint64_t maxBlobSendSize = 4096;
  static SPL::rstring debugAspect;
};

<%SPL::CodeGen::headerEpilogue($model);%>

