/* Copyright (C) 2013-2014, International Business Machines Corporation */
/* All Rights Reserved */

/* Additional includes go here */
#include <cstring>
#include <cstdlib>

<%
	require InetResource;

	#warn deprecated COF
	sub warnDeprecateCof {
		SPL::CodeGen::warnln(InetResource::INET_DEPRECATED_COF(@_), $model->getContext()->getSourceLocation());
	}

	my $ccContext = $model->getContext()->getOptionalContext("ConsistentRegion");
	if (defined $ccContext) {
		SPL::CodeGen::exitln(InetResource::INET_CONSISTENT_CHECK("FTPReader"));
	}

	my $hasPasswordStream = $model->getNumberOfInputPorts() == 2;
	my $hasErrorStream = $model->getNumberOfOutputPorts() == 2;
	my $mainOutputPort = $model->getOutputPortAt(0);
	my $errorOutputPort;
	if ($hasErrorStream) { $errorOutputPort = $model->getOutputPortAt(1); }
	my $mainInputPort = $model->getInputPortAt(0);
	
	my $protocol     = $model->getParameterByName("protocol")->getValueAt(0)->getCppExpression();
	my $protocolType = $model->getParameterByName("protocol")->getValueAt(0)->getCppType();
	my $protocolSPLType = $model->getParameterByName("protocol")->getValueAt(0)->getSPLType();
	my $protocolEm = $model->getParameterByName("protocol")->getValueAt(0)->getParameterExpressionMode();
	print "//$protocol\n//$protocolType\n//$protocolSPLType\n//$protocolEm\n";

	my $isDirReader = $model->getParameterByName("isDirReader");
	$isDirReader = $isDirReader->getValueAt(0)->getSPLExpression() if $isDirReader;
	if ($isDirReader) {
		if ($isDirReader ne "true") {
			undef $isDirReader;
		}
	}
	print "//isDirReader : $isDirReader\n";
	
	my $hasCloseConnectionMode = $model->getParameterByName("connectionCloseMode");
	my $closeConnectionMode;
	my $closeConnectionModeType;
	if ($hasCloseConnectionMode) {
		$closeConnectionMode = $hasCloseConnectionMode->getValueAt(0)->getCppExpression();
		$closeConnectionModeType = $hasCloseConnectionMode->getValueAt(0)->getCppType();
	}
	print "//closeConnectionMode : $closeConnectionMode\n";
	print "//closeConnectionModeType : $closeConnectionModeType\n";

	my $host = $model->getParameterByName("host")->getValueAt(0)->getCppExpression();
	print "//host : $host\n";
	my $path = $model->getParameterByName("path")->getValueAt(0)->getCppExpression();
	print "//path : $path\n";
	
	my $filename = $model->getParameterByName("filename");
	$filename = $filename->getValueAt(0)->getCppExpression() if $filename;

	my $username = $model->getParameterByName("username")->getValueAt(0)->getCppExpression();
	my $password = $model->getParameterByName("password");
	$password = $password->getValueAt(0)->getCppExpression() if ($password);
	print "//password : $password\n";

	my $connectionTimeout = $model->getParameterByName("connectionTimeout");
	$connectionTimeout = $connectionTimeout->getValueAt(0)->getCppExpression() if ($connectionTimeout);
	print "//connectionTimeout = $connectionTimeout\n";

	my $transferTimeout = $model->getParameterByName("transferTimeout");
	$transferTimeout = $transferTimeout->getValueAt(0)->getCppExpression() if ($transferTimeout);
	print "//transferTimeout = $transferTimeout\n";

	my $curlVerbose = $model->getParameterByName("curlVerbose");
	$curlVerbose = $curlVerbose ? $curlVerbose->getValueAt(0)->getCppExpression() : "false";
	print "//curlVerbose $curlVerbose\n";

	my $useEPSV = $model->getParameterByName("useEPSV");
	$useEPSV = $useEPSV ? $useEPSV->getValueAt(0)->getCppExpression() : "true";
	print "//useEPSV $useEPSV\n";
	my $useEPRT = $model->getParameterByName("useEPRT");
	$useEPRT= $useEPRT ? $useEPRT->getValueAt(0)->getCppExpression() : "true";
	print "//useEPRT $useEPRT\n";
	my $usePRET;
	# = $model->getParameterByName("usePRET");
	#if ($usePRET) { $usePRET = $usePRET->getValueAt(0)->getCppExpression(); }
	#print "//usePRET $usePRET\n";
	my $usePORT = $model->getParameterByName("usePORT");
	if ($usePORT) { $usePORT = $usePORT->getValueAt(0)->getCppExpression(); } else { undef $usePORT; }
	print "//usePORT $usePORT\n";
	my $skipPASVIp = $model->getParameterByName("skipPASVIp");
	$skipPASVIp = $skipPASVIp ? $skipPASVIp->getValueAt(0)->getCppExpression() : "false";
	print "//skipPASVIp $skipPASVIp\n";

	# scan output functions to get requested information
	my $needBinaryData;
	my $needLine;
	my $needFileName;
	my $needFileSize;
	my $needFileDate;
	my $needFileUser;
	my $needFileGroup;
	my $needFileInfo;
	my $needIsFile;
	for (my $i = 0; $i < $mainOutputPort->getNumberOfAttributes(); $i++) {
		my $attr = $mainOutputPort->getAttributeAt($i);
		if ($attr->hasAssignmentWithOutputFunction()) {
			my $of = $attr->getAssignmentOutputFunctionName();
			if ($of eq "Binary") {
				$needBinaryData = "1";
			} elsif ($of eq "Line") {
				$needLine = "1";
			} elsif ($of eq "FileName") {
				$needFileName = "1"; $needLine = "1";
			} elsif ($of eq "FileSize") {
				$needFileSize = "1"; $needLine = "1";
			} elsif ($of eq "FileDate") {
				$needFileDate = "1"; $needLine = "1";
			} elsif ($of eq "FileUser") {
				$needFileUser = "1"; $needLine = "1";
			} elsif ($of eq "FileGroup") {
				$needFileGroup = "1"; $needLine = "1";
			} elsif ($of eq "FileInfo") {
				$needFileInfo = "1"; $needLine = "1";
			} elsif ($of eq "IsFile") {
				$needIsFile = "1"; $needLine = "1";
			}
		}
	}
	SPL::CodeGen::exitln(InetResource::INET_FTP_READER_PARAM_CHECK_1(), $mainOutputPort->getSourceLocation()) if ($isDirReader && $needBinaryData);
	SPL::CodeGen::exitln(InetResource::INET_FTP_READER_PARAM_CHECK_2(), $mainOutputPort->getSourceLocation()) if ($needBinaryData && $needLine);
	SPL::CodeGen::exitln(InetResource::INET_FTP_READER_PARAM_CHECK_3(), $mainOutputPort->getSourceLocation()) if (! $isDirReader && ($needFileName || $needFileSize || $needFileDate || $needFileUser || $needFileGroup || $needFileInfo));

	# scan output functions
	my $hasNonDefaultErrorOutputPortAssignement = 0;
	if ($hasErrorStream) {
			for (my $i = 0; $i < $errorOutputPort->getNumberOfAttributes(); $i++) {
				my $attr = $errorOutputPort->getAttributeAt($i);
				if ($attr->hasAssignmentWithOutputFunction()) {
					my $of = $attr->getAssignmentOutputFunctionName();
					if (($of eq "Error") || ($of eq "ErrorCode")) {
						$hasNonDefaultErrorOutputPortAssignement = 1;
					} elsif ($of eq "ErrorText") {
						$hasNonDefaultErrorOutputPortAssignement = 1;
					} elsif ($of eq "Url") {
						$hasNonDefaultErrorOutputPortAssignement = 1;
					} elsif (($of eq "NoTransfers") || ($of eq "TransferCount")) {
						$hasNonDefaultErrorOutputPortAssignement = 1;
					} elsif (($of eq "NoTransferFailures") || ($of eq "TransferFailureCount")) {
						$hasNonDefaultErrorOutputPortAssignement = 1;
					} elsif (($of eq "NoBytesTransferred") || ($of eq "BytesTransferred")) {
						$hasNonDefaultErrorOutputPortAssignement = 1;
					}
				}
			}
	}

	#verify operator model for error port in default case
	if (! $hasNonDefaultErrorOutputPortAssignement) {
		if ($hasErrorStream) {
			if (1 != $errorOutputPort->getNumberOfAttributes()) {
				SPL::CodeGen::exitln(InetResource::INET_FTP_READER_OUTPUT_PARAM_CHECK_1(), $errorOutputPort->getSourceLocation());
			}
			if (!SPL::CodeGen::Type::isRString($errorOutputPort->getAttributeAt(0)->getSPLType())) {
				SPL::CodeGen::exitln(InetResource::INET_FTP_READER_OUTPUT_PARAM_CHECK_1(), $errorOutputPort->getSourceLocation());
			}
		}
	}
%>

<%SPL::CodeGen::implementationPrologue($model);%>

using namespace com::ibm::streamsx::inet::ftp;
// Constructor
MY_OPERATOR::MY_OPERATOR() :
	sequence(0),
	data(),
	mutex(),
	shutdown(false),
	inTuple0(NULL)
{
	FTPWrapper::TransmissionProtocolLiteral tpl = static_cast<FTPWrapper::TransmissionProtocolLiteral>(<%=$protocol%>.getIndex());
	FTPWrapper::CloseConnectionMode cm = FTPWrapper::never;
<%	if ($hasCloseConnectionMode) { %>
		cm = static_cast<FTPWrapper::CloseConnectionMode>(<%=$closeConnectionMode%>.getIndex());
<%	} %>
	SPLAPPTRC(L_INFO, "Work with protocol:" << FTPWrapper::toString(tpl) << " closeConnectionMode=" << FTPWrapper::toString(cm), debugAspect);

	reader = new FTPReaderWrapper(cm, tpl, <%=$curlVerbose%>, FTPWrapper::none, debugAspect, <%=$useEPSV%>, <%=$useEPRT%>, <%=$skipPASVIp%>, this, callback);
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() {
	delete reader;
}

// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() {
	// This is an asynchronous call
	shutdown = true;
	reader->prepareToShutdown();
}

// Tuple processing for non mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port) {
	SPLAPPTRC(L_TRACE, "process(" << tuple << ", " << port << ")", debugAspect);

	AutoPortMutex apm(mutex, *this);

	switch (port) {
	case 0 : {
		IPort0Type const & iport$0 = static_cast<IPort0Type const &> (tuple);

<%		unless ($hasPasswordStream) { %>
			//set credentials
			reader->setUsername(<%=$username%>);
<%			if ($password) { %>
				reader->setPassword(<%=$password%>);
<%			} %>
<%		} %>

		//get hostPath parameter filename
		reader->setHost(<%=$host%>);
		reader->setPath(<%=$path%>);
<%		if ($filename) {%>
			reader->setFilename(<%=$filename%>);
<%		}%>

		//check whether all data was sent from previous read
		size_t dataSize = data.size();
		if ((0 != dataSize)) {
			sendError("Start read with non empty data blob", iport$0);
			exit(1);
		}

<%		if ($usePORT) { %>
			reader->setUsePORT(<%=$usePORT%>);
<%		} %>
<%		if ($connectionTimeout) { %>
			reader->setConnectionTimeout(<%=$connectionTimeout%>);
<%		} %>
<%		if ($transferTimeout) { %>
			reader->setTransferTimeout(<%=$transferTimeout%>);
<%		} %>

		//prepare ituple pointer
		inTuple0 = &iport$0;
		sequence = 0;
		//perform operation
		if (reader->perform()) {
			SPLAPPTRC(L_DEBUG, "operation well performed", debugAspect);
			sendIntermediateTuples(iport$0);
			sendLeftoverTuple(iport$0);
		} else {
			sendError(reader->getError(), iport$0);
			data.clear();
		}
		submit(SPL::Punctuation(SPL::Punctuation::WindowMarker), 0);
		//invalidate ituple pointer
		inTuple0 = NULL;
		break;
	}
<%	if ($hasPasswordStream) { %>
		case 1 : {
			IPort1Type const & iport$1 = static_cast<IPort1Type const &> (tuple);
			//set credentials
			reader->setUsername(<%=$username%>);
<%			if ($password) { %>
				reader->setPassword(<%=$password%>);
<%			} %>
		};
<%	} %>
	}
}

// Punctuation processing
void MY_OPERATOR::process(Punctuation const & punctuation, uint32_t port) {
	AutoPortMutex apm(mutex, *this);
	if(Punctuation::WindowMarker == punctuation) {
		SPLAPPTRC(L_DEBUG, "got a punct WindowMarker from port " << port, debugAspect);
		if (0 == port) {
			reader->onPunct();
			submit(SPL::Punctuation(SPL::Punctuation::WindowMarker), 0);
		}
	} else { //final marker
		SPLAPPTRC(L_DEBUG, "got a punct FinalMarker from port " << port, debugAspect);
	}
}

void MY_OPERATOR::sendIntermediateTuples(IPort0Type const & iport$0) {
	size_t size = data.size();
	char const * cp = data.c_str();
	//std::cout << "sendIntermediateTuples size=" << size << std::endl;
<%	if ($needBinaryData) { %>
	if (size > 0) {
		OPort0Type otuple = generateOutTuple(cp, size, false, iport$0);
		submit(otuple, 0);
		data.clear();
	}
<%	} else { %>
	if (size > 0) {
		char const * const end_cp = cp + size;
		bool eolFound = true;
		while(eolFound && (end_cp > cp)) {
			//const void * p1; const void * p2;
			//p1 = cp; p2 = end_cp;
			//std::cout << p1 << "\n" << p2 << "\n" << std::endl;
			size_t searchCount = end_cp - cp;
			char const * next = static_cast<char const *>(memchr(cp, '\n', searchCount));
			if (next) {
				next++;
				eolFound = true;
			} else { //not found
				eolFound = false;
			}
			//std::cout << "eolFound=" << eolFound << std::endl;
			if (eolFound) {
				size_t blockLength = next - cp;
				//std::cout << "blocklen=" << blockLength << std::endl;
				OPort0Type otuple = generateOutTuple(cp, blockLength, false, iport$0);
				submit(otuple, 0);
				cp = next;
			}
		}
		if (!eolFound) {
			size_t leftoverSize = end_cp - cp;
			//std::cout << "leftoverSize=" << leftoverSize << std::endl;
			std::string restData(cp, leftoverSize);
			data = restData;
		} else {
			data.clear();
		}
	}
<%	} %>
}

void MY_OPERATOR::sendLeftoverTuple(IPort0Type const & iport$0) {
	size_t size = data.size();
	//std::cout << "sendLeftoverTuple size=" << size << std::endl;
	if <%if ($isDirReader ne "true") {%>(<%}%>(0 != size) <%if ($isDirReader ne "true") {%>|| (0 == sequence))<%}%> { //send a tuple with empty date for files with size 0
		char const * cp = data.c_str();
		OPort0Type otuple = generateOutTuple(cp, size, true, iport$0);
		submit(otuple, 0);
	}
	data.clear(); //all sent
}

MY_OPERATOR::OPort0Type MY_OPERATOR::generateOutTuple(char const * cp, uint64_t size, bool leftover, IPort0Type const & iport$0) {
	//send lines with final \n
<% if ($needFileName || $needFileSize || $needFileDate || $needFileUser || $needFileGroup || $needFileInfo || $needIsFile) { %>
	uint64_t dirlineSize = size;
	//send lines with final \n
	if (!leftover) {
		dirlineSize--;
	}
	SPL::rstring myDirLine(cp, dirlineSize);
	const SPL::list<SPL::rstring> myList = SPL::Functions::String::tokenize(myDirLine, " ", false);
<% } %>
<% if ($needFileName) { %>
	SPL::rstring fileName("-----");
	if (myList.size() >= 9) {
		fileName = myList[8];
	} else {
		sendError("no FileName available during read of url=" + reader->getUrl() + " line=" + myDirLine, iport$0);
	}
<% } %>
<% if ($needFileSize) { %>
	uint64_t fileSize = 0;
	if (myList.size() >= 5) {
		fileSize = atoi(myList[4].c_str());
	} else {
		sendError("no FileSize available during read of url=" + reader->getUrl() + " line=" + myDirLine, iport$0);
	}
<% } %>
<% if ($needFileDate) { %>
	SPL::rstring fileDate("-------------");
	if (myList.size() >= 8) {
		fileDate = myList[5] + " " + myList[6] + " " + myList[7];
	} else {
		sendError("no FileDate available during read of url=" + reader->getUrl() + " line=" + myDirLine, iport$0);
	}
<% } %>
<% if ($needFileUser) { %>
	SPL::rstring fileUser("-----");
	if (myList.size() >= 3) {
		fileUser = myList[2];
	} else {
		sendError("no FileUser available during read of url=" + reader->getUrl() + " line=" + myDirLine, iport$0);
	}
<% } %>
<% if ($needFileGroup) { %>
	SPL::rstring fileGroup("-----");
	if (myList.size() >= 4) {
		fileGroup = myList[3];
	} else {
		sendError("no FileGroup available during read of url=" + reader->getUrl() + " line=" + myDirLine, iport$0);
	}
<% } %>
<% if ($needFileInfo) { %>
	SPL::rstring fileInfo("xxxxxxxxxx");
	if (myList.size() >= 1) {
		fileInfo = myList[0];
	} else {
		sendError("no FileInfo available during read of url=" + reader->getUrl() + " line=" + myDirLine, iport$0);
	}
<% } %>
<% if ($needIsFile) { %>
	SPL::boolean isFile = false;
	if ((myList.size() >=1) && (myList[0].size() > 0)) {
		if (myList[0][0] == '-') {
			isFile = true;
		}
	} else {
		sendError("no FileInfo available during read of url=" + reader->getUrl() + " line=" + myDirLine, iport$0);
	}
<% } %>


<%	# generate the initializer for the tuple
	my $init = "";
	my $numAttrs = $mainOutputPort->getNumberOfAttributes();
	for (my $i = 0; $i < $numAttrs; $i++) {
		my $attr = $mainOutputPort->getAttributeAt($i);
		my $aName = $attr->getName();
		if ($attr->hasAssignmentWithOutputFunction()) {
			my $of = $attr->getAssignmentOutputFunctionName();
			if ($of eq "Binary") {
				$init .= "SPL::blob((unsigned const char*)cp, size)";
			} elsif ($of eq "Line") {
				$init .= "SPL::rstring(cp, size)";
			} elsif ($of eq "Url") {
				$init .= "SPL::rstring(reader->getUrl())";
			} elsif ($of eq "FileName") {
				$init .= "SPL::rstring(fileName)";
			} elsif ($of eq "FileSize") {
				$init .= "SPL::uint64(fileSize)";
			} elsif ($of eq "FileDate") {
				$init .= "SPL::rstring(fileDate)";
			} elsif ($of eq "FileUser") {
				$init .= "SPL::rstring(fileUser)";
			} elsif ($of eq "FileGroup") {
				$init .= "SPL::rstring(fileGroup)";
			} elsif ($of eq "FileInfo") {
				$init .= "SPL::rstring(fileInfo)";
			} elsif ($of eq "IsFile") {
				$init .= "SPL::boolean(isFile)";
			} elsif ($of eq "Sequence") {
				$init .= "SPL::int32(sequence)";
			} elsif ($of eq "NoTransfers") {
				warnDeprecateCof("getNoTransfers()");
				$init .= "SPL::uint32(reader->getNoTransfers())";
			} elsif ($of eq "TransferCount") {
				$init .= "SPL::uint32(reader->getNoTransfers())";
			} elsif ($of eq "NoTransferFailures") {
				warnDeprecateCof("NoTransferFailures()");
				$init .= "SPL::uint32(reader->getNoTransferFailures())";
			} elsif ($of eq "TransferFailureCount") {
				$init .= "SPL::uint32(reader->getNoTransferFailures())";
			} elsif ($of eq "NoBytesTransferred") {
				warnDeprecateCof("NoBytesTransferred()");
				$init .= "SPL::uint32(reader->getNoBytesTransferred())";
			} elsif ($of eq "BytesTransferred") {
				$init .= "SPL::uint32(reader->getNoBytesTransferred())";
			} elsif ($of eq "TransferSpeed") {
				$init .= "SPL::float64(reader->getTransferSpeed())";
			} elsif ($of eq "AsIs") {
				$init .= SPL::CodeGenHelper::ensureValue ($attr->getSPLType(), $attr->getAssignmentValue()->getCppExpression());
			}
		} else {
			$init .= SPL::CodeGenHelper::ensureValue ($attr->getSPLType(), $attr->getAssignmentValue()->getCppExpression());
		}
		$init .= ",\n" if $i < $numAttrs-1;
	}
%>
	OPort0Type otuple = OPort0Type(<%=$init%>);
	/*MY_OPERATOR_SCOPE::MY_OPERATOR::OPort0Type otup(<%=$init%>);*/
	SPLAPPTRC(L_DEBUG, "send tuple sequence=" << sequence, debugAspect);
	SPLAPPTRC(L_TRACE, "otuple=" << otuple, debugAspect);
	sequence++;
	return otuple;
}

size_t MY_OPERATOR::callback(void * buffer, size_t size, size_t count, void * stream) {
	char const * cp = static_cast<char const*>(buffer);
	MY_OPERATOR * myOp = static_cast<MY_OPERATOR *>(stream);
	return myOp->writeToStream(buffer, size, count);
}

size_t MY_OPERATOR::writeToStream(void * buffer, size_t size, size_t count) {
	size_t res = size * count;
	//shutdown is handled from wrapper
	if (inTuple0) {
		sendIntermediateTuples(*inTuple0);
	} else {
		SPLAPPTRC(L_ERROR, "callback callend in wrong context", debugAspect);
	}
	char const * cp = static_cast<char const *>(buffer);
	data.append(cp, res);
	return res;
}

void MY_OPERATOR::sendError(SPL::rstring const & reason, IPort0Type const & iport$0) {
	SPL::rstring err2 = reason + " url:" + reader->getUrl();
	SPLAPPTRC(L_ERROR, err2, debugAspect);
<% if ($hasErrorStream) { %>
	<%	# generate the initializer for the tuple
		my $init = "";
		if ($hasNonDefaultErrorOutputPortAssignement) {
			my $numAttrs = $errorOutputPort->getNumberOfAttributes();
			for (my $i = 0; $i < $numAttrs; $i++) {
				my $attr = $errorOutputPort->getAttributeAt($i);
				my $aName = $attr->getName();
				if ($attr->hasAssignmentWithOutputFunction()) {
					my $of = $attr->getAssignmentOutputFunctionName();
					if ($of eq "Error") {
						warnDeprecateCof("Error()");
						$init .= "SPL::uint32(reader->getResultCode())";
					} elsif ($of eq "ErrorCode") {
						$init .= "SPL::uint32(reader->getResultCode())";
					} elsif ($of eq "ErrorText") {
						$init .= "SPL::rstring(err2)";
					} elsif ($of eq "Url") {
						$init .= "SPL::rstring(reader->getUrl())";
					} elsif ($of eq "NoTransfers") {
						warnDeprecateCof("NoTransfers()");
						$init .= "SPL::uint32(reader->getNoTransfers())";
					} elsif ($of eq "TransferCount") {
						$init .= "SPL::uint32(reader->getNoTransfers())";
					} elsif ($of eq "NoTransferFailures") {
						warnDeprecateCof("NoTransferFailures()");
						$init .= "SPL::uint32(reader->getNoTransferFailures())";
					} elsif ($of eq "TransferFailureCount") {
						$init .= "SPL::uint32(reader->getNoTransferFailures())";
					} elsif ($of eq "NoBytesTransferred") {
						warnDeprecateCof("NoBytesTransferred()");
						$init .= "SPL::uint32(reader->getNoBytesTransferred())";
					} elsif ($of eq "BytesTransferred") {
						$init .= "SPL::uint32(reader->getNoBytesTransferred())";
					} elsif ($of eq "AsIs") {
						$init .= SPL::CodeGenHelper::ensureValue ($attr->getSPLType(), $attr->getAssignmentValue()->getCppExpression());
					}
				} else {
					$init .= $attr->getCppType;
					$init .= "()";
				}
				$init .= ",\n" if $i < $numAttrs-1;
			}
		} else {
			$init .= "SPL::rstring(err2)";
		}
	%>
	OPort1Type otuple = OPort1Type(<%=$init%>);
	/*OPort1Type otuple(<%=$init%>);*/
	submit(otuple, 1);
<% } %>
}

SPL::rstring MY_OPERATOR::debugAspect("FTPReader");

<%SPL::CodeGen::implementationEpilogue($model);%>

