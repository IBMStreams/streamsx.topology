namespace com.ibm.streamsx.inet.http;

/**
 * The operator HTTPParallelRequest issues HTTP requests in parallel asynchronously from the input stream.
 * The operator opens on request up to *maxConnections* parallel http connections an sends the results downstream once the 
 * response is received. The operator has one input stream. The attributes of the input stream may define the kind and the 
 * parameters of the http operation like method, url, headers  and data. When the response to an request is received, the 
 * result is passed in an output tuple of the *Result* port. If an http operation fails, the status information and the error
 * is sent to the *Result* port and optionally to the *Error* port.
 * The operator maintains a pool of up to *maxConnections* http connections. An incoming request is routed round-robin to 
 * one of the connections. If the connection is busy the request is queued. The length of the queues is determined with 
 * parameter *queue*. Finally the congestion policy of the queues is defined with parameter *congestionPolicy*.
 * 

 * @input	Request				The request stream with attributes of the http request.
 * @output	Result				The result stream. One tuple is generated for each input tuple.
 * 								The *Result* port must have at least the following attributes : *rstring body, list<rstring> headers, rstring message, int32 status, rstring url*
 * 								where body is the response body, headers is the response header list, message is the error/success message, status is the error status of the operation, url is the encoded url. 
 * 								All other attributes are assigned from the input stream.
 * @output	Error				The optional error stream. One tuple indicates a failed http operation.
 * 								The type is : *tuple<rstring url, rstring message, int32 status>*
 * 
 * @param	method				This required parameter determines the kind of the http request. Type *HttpMethod*
 * @param	url					The request url. Required parameter.
 * @param	urlEncode			Defines the function to be used to prepare the url. Predefined values are [function:com.ibm.streamsx.inet.http::urlEncode(rstring)] or *passThrough*. 
 * 								The user may define an own function for url-preprocessing. This function must have a signature *rstring myfunction(rstring)*
 * 								If the function returns an empty string, no http request is performed and an error tuple is sent. Default is *urlEncode*
 * @param	data				The body of the operation. Default is the empty string.
 * @param	headers				http headers passes in the http request. Default is the empty list.
 * @param	contentTypeHeader	The content type header. If this header is not empty, it is appended to the headers list. Default is *"ContentType: application/x-www-form-urlencoded"*
 * @param	requestTimeout		This is the maximum time in seconds that you allow the transfer operation to take. Normally, name lookups can take a considerable time and limiting operations to less than a few minutes risk aborting perfectly normal operations. Default timeout is 5
 * @param	connectionTimeout	This is the maximum time in seconds that you allow the connection to the server to take. This only limits the connection phase, once it has connected, this option is of no more use. Default is 20 seconds
 * @param	width				The number of parallel used threads. This conforms to the maximum number if used http connections. Default is 8
 * @param	queue				The length of the input queue of each thread. Default 100
 * @param	congestionPolicy	The congestion policy of the input queue. Type *Sys.CongestionPolicy*. Default *Sys.Wait*
 * @param	user				This user name for authentication is passed to to the server. Ignored if empty.
 * @param	password			This password for authentication is passed to the server. Ignored if empty.
 * @param	certFile			Absolute path to a certificate file sent to the server. Ignored if empty.
 * @param	certType			The certification file type (PEM, P12). Ignored if empty.
 * @param	keyFile				Absolute path to a private key file to be sent to the server. Ignored if empty.
 * @param	keyType				The key file type (PEM, P12). Ignored if empty.
 * @param	keyPass				The password for the private key. Ignored if empty.
 */
public composite HTTPParallelRequest (output Result, Error; input Request) {
	param
		expression<HttpMethod>    $method;
		attribute                 $url;
		function                  $urlEncode : urlEncode;
		expression<rstring>       $data : "";
		expression<list<rstring>> $headers : [];
		expression<rstring>       $contentTypeHeader: "Content-Type: application/x-www-form-urlencoded";
		expression<int32>         $requestTimeout : 5;
		expression<int32>         $connectionTimeout : 120;
		expression<int32>         $width: 8;
		expression<int32>         $queue : 100;
		expression<Sys.CongestionPolicy> $congestionPolicy : Sys.Wait;
		expression<rstring>       $user : "";
		expression<rstring>       $password : "";
		expression<rstring>       $certFile : "";
		expression<rstring>       $certType : "";
		expression<rstring>       $keyFile : "";
		expression<rstring>       $keyType : "";
		expression<rstring>       $keyPass : "";

	type
		/**
		 * This type determines the kind of the http operation
		 * values are httpGet, httpPut, httpPost, httpDelete
		 */
		static HttpMethod = enum {httpGet, httpPut, httpPost, httpDelete};

	graph
		@parallel(width=$width)
		(
			stream<I, tuple<rstring body, list<rstring> headers, rstring message, int32 status, rstring url>> Result as R;
			stream<rstring url, rstring message, int32 status> Error as E
		) = Custom(Request as I) {
			logic
				onTuple I: {
					mutable int32 error_ = 0;
					mutable rstring mess_="success";
					mutable rstring result_ = "";
					mutable list<rstring> replyHeaders_ = [];
					mutable list<rstring> requestHeaders_ = $headers;
					if (length($contentTypeHeader) > 0) {
						appendM(requestHeaders_, $contentTypeHeader);
					}
					rstring urlProcessed_ = $urlEncode($url);
					if (urlProcessed_ == "") {
						error_ = -1;
						mess_ = "$urlEncode returned empty string";
					} else {
						if (isTraceable(Trace.trace)) {
							appTrc(Trace.trace, "Emit http request "+
										(rstring)$method+
										" url:"+urlProcessed_+
										" requestHeaders:"+(rstring)requestHeaders_+
										" user:"+$user+
										" password:*****"+
										" certFile:"+$certFile+
										" certType:"+$certType+
										" keyFile:"+$keyFile+
										" keyType:"+$keyType+
										" keyPass:"+$keyPass+
										" requestTimeout:"+(rstring)$requestTimeout+
										" connectionTimeout:"+(rstring)$connectionTimeout);
						}
						if ($method == HttpMethod.httpGet) {
							result_ = com.ibm.streamsx.inet.http::httpGet   (       urlProcessed_, requestHeaders_, $user, $password, $certFile, $certType, $keyFile, $keyType, $keyPass, replyHeaders_, error_, $requestTimeout, $connectionTimeout);
						} else if ($method == HttpMethod.httpPost) {
							result_ = com.ibm.streamsx.inet.http::httpPost  ($data, urlProcessed_, requestHeaders_, $user, $password, $certFile, $certType, $keyFile, $keyType, $keyPass, replyHeaders_, error_, $requestTimeout, $connectionTimeout);
						} else if ($method == HttpMethod.httpPut) {
							result_ = com.ibm.streamsx.inet.http::httpPut   ($data, urlProcessed_, requestHeaders_, $user, $password, $certFile, $certType, $keyFile, $keyType, $keyPass, replyHeaders_, error_, $requestTimeout, $connectionTimeout);
						} else if ($method == HttpMethod.httpDelete) {
							result_ = com.ibm.streamsx.inet.http::httpDelete(       urlProcessed_, requestHeaders_, $user, $password, $certFile, $certType, $keyFile, $keyType, $keyPass,                error_, $requestTimeout, $connectionTimeout);
						}
					}
					if (error_ != 0) {
						if ( mess_ == "" ) mess_="error";
						appTrc(Trace.error,"Error code in method "+(rstring)$method+" url:"+urlProcessed_+" was "+(rstring)error_);
						submit({url=urlProcessed_, message=mess_, status=error_}, E);
					}
					mutable tuple<R> ot = {};
					assignFrom(ot, I);
					ot.body=result_; ot.headers=replyHeaders_; ot.message=mess_; ot.status=error_;
					submit(ot, R);
				}
				onPunct I : {
					submit(currentPunct(), R);
					submit(currentPunct(), E);
				}
			config
				threadedPort : queue(I, $congestionPolicy, $queue);
		}
}

/**
 * This function passes the input string unchanged
 * @param	val the input string
 * @return	the unchanged input string
 */
public rstring passThrough(rstring val) { return val; }
