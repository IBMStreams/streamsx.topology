/*
*******************************************************************************
* Copyright (C) 2009,2012-2014, International Business Machines Corporation. 
* All Rights Reserved. *
*******************************************************************************
*/

//
// Class Description:
//
// Mean to be included in CGT file.

  /*
   * This class interacts with the cURL library, holding the contents of the file being retrieved and providing
   * a callback function for cURL to invoke when data is available from the file retrieval
   *
   * Preconditions: curl_global_init() has already been called before constructing objects of this type
   *
   * Postconditions: curl_global_cleanup() must be called after all objects of this type are destructed
   *
   */
class InetRetriever
  {


public:
  /*
   *  Constructor
   *
   * url        The URL, including protocol designation, of the target to be retrieved.
   *            This value may not be altered after the object has been constructed.
   *
   * Throws:    An integer if there was a problem during the construction of this object.
   *            Typically, this indicates that an error occurred during initialization of the
   *            cURL library used by this object.
   *            If the constructor throws an exception, the results from further use of the
   *            object are unpredictable.
   */
  InetRetriever(const std::string& url, const int timer=0) throw(int);

  virtual ~InetRetriever();

  /*
   * Clear all internal buffers, and reset byte counters to zero.
   */
  void reset();

  /*
   * Retrieve the contents of the targURL previously supplied to the constructor, subject to
   * options previously set with the ignoreLastModTime() and/or incrementalFetch() methods.
   *
   * Returns:   A string containing the entire contents of the target, including any
   *            embedded newline characters.
   *
   * Throws:    The cURL return code from the fetch, if it is nonzero.
   */
  std::string fetch() throw(CURLcode);

  std::string lastknownContents() const;

  size_t bytesTransferredTotal();
  size_t bytesTransferredLastFetch();

  void enableCurlTrace();
  void disableCurlTrace();

  std::string targetURL() const;
  std::string effectiveURL() const;
  std::string contentType() const;
  long responseCode() const;
  double fetchTime() const;

  // Returns true if the URL was updated, false if it stayed the same.
  bool updateURL(std::string newURL);

  void ignoreLastModTime();
  void ignoreLastModTime(bool whether);

  void incrementalFetch();
  void incrementalFetch(bool whether);

  /*
   * To be used for calling certain curl_easy_setopt() and/or curl_easy_getinfo() functions ONLY.
   * In addition, the following curl_easy_setopt() options *shall not* be called by users; if they
   * are called, the results are unpredictable:
   * - Any whose name ends with FUNCTION or DATA (e.g. WRITEFUNCTION, WRITEDATA, and so on)
   * - CURLOPT_URL, CURLOPT_FILETIME, CURLOPT_TIMECONDITION, CURLOPT_TIMEVALUE
   *
   */
  CURL* curlHandle();

private:
  static
  size_t consumeData_static(void* buffer, const size_t recSize,
      const size_t numRecs, void* objPtr);

  /*
   *  Callback function -- called by cURL when it has data to supply
   */
  size_t consumeData(const void* data, const size_t recSize,
      const size_t numRecs);

  // Disallow copying and assignment of this object (it doesn't make sense semantically)
  InetRetriever(const InetRetriever& cr);

  InetRetriever& operator=(const InetRetriever& cr);

  /*
   *  Instance variables
   */

  size_t        _bytesTransferredTotal, _bytesTransferredLastFetch;
  std::string   _targetURL, _effectiveURL, _contentType, _curlBuffer, _fileCache;
  long          _lastModTime;
  int           _timeout, _responseCode;
  double        _fetchTime;
  bool          _ignoreLastModTime, _incrementalFetch, _dataCameBack;
  CURL*         _curlHandle;

  }; // Class InetRetriever

