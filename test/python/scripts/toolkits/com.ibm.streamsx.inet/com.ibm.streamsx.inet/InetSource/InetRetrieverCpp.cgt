/*
*******************************************************************************
* Copyright (C) 2009,2012-2014, International Business Machines Corporation. 
* All Rights Reserved. *
*******************************************************************************
*/

// This file contains the source for InetRetriever.
// As it references MY_OPERATOR, it's meant to be included in a cgt file.


MY_OPERATOR::InetRetriever::InetRetriever(const std::string& url, const int timer) throw(int) :
  _targetURL(url),
  _timeout(timer)
  {
    reset();
    _ignoreLastModTime = _incrementalFetch = false;

    _curlHandle = curl_easy_init();

    if (NULL == _curlHandle)
      {
        std::cerr << "InetRetriever: Init returned null curlHandle" << std::endl;
        throw 12;
      }

#if 0
    printf(">>>>>>>>>>>>>>>> retriever for URL %s, timeout=%d\n", _targetURL.c_str(), _timeout);
#endif

    // what to do with returned data - call the class' static callback method
    curl_easy_setopt(_curlHandle, CURLOPT_WRITEFUNCTION, consumeData_static);

    // Set the write function's user-data (state data).
    // Note that passing the "this" pointer allows the static callback method (set above)
    // to resolve the particular instance that the callback should be directed to.
    curl_easy_setopt(_curlHandle, CURLOPT_WRITEDATA, this);

    // Set the URL that we are fetching
    curl_easy_setopt(_curlHandle, CURLOPT_URL, _targetURL.c_str());

    // Tell curl to follow any redirects for the URL that the server returns
    curl_easy_setopt(_curlHandle, CURLOPT_FOLLOWLOCATION, 1L);

    // Tell curl to ask the server to provide the "last modified at" timestamp when fetching a file
    curl_easy_setopt(_curlHandle, CURLOPT_FILETIME, 1);

    // accept all supported built-in compression methods
#ifdef CURLOPT_ACCEPT_ENCODING
    curl_easy_setopt(_curlHandle, CURLOPT_ACCEPT_ENCODING, "");
#elseif CURLOPT_ENCODING
    curl_easy_setopt(_curlHandle, CURLOPT_ENCODING, "");
#endif

    // some servers insist on knowing who is asking
    curl_easy_setopt(_curlHandle, CURLOPT_USERAGENT, "IBMStreams/4.0");

    // set timeout, if specified
    if (_timeout) {
      curl_easy_setopt(_curlHandle, CURLOPT_NOSIGNAL, 1);
      curl_easy_setopt(_curlHandle, CURLOPT_TIMEOUT, _timeout);
    } 
  }

MY_OPERATOR::InetRetriever::~InetRetriever()
  {
    curl_easy_cleanup(_curlHandle);
  }

std::string MY_OPERATOR::InetRetriever::fetch() throw(CURLcode)
  {

    // function result will be stored here
    std::string result;

    // clear state variables for other results that can be assigned to output attributes
    _curlBuffer.clear();
    _dataCameBack = false;
    _bytesTransferredLastFetch = 0;
    _responseCode = 0;
    _fetchTime = 0;
    _effectiveURL.clear();
    _contentType.clear();

    // Unless requested, don't retrieve again if unmodified since last retrieval
    if (!_ignoreLastModTime && _lastModTime>0)
      {
        // Tell curl to not retrieve the file if it hasn't changed since our last retrieval
        curl_easy_setopt(_curlHandle, CURLOPT_TIMECONDITION, CURL_TIMECOND_IFMODSINCE);
        curl_easy_setopt(_curlHandle, CURLOPT_TIMEVALUE, _lastModTime);
      }
    else
      {
        // Tell curl to retrieve the file regardless of whether it has changed since our last
        // retrieval
        curl_easy_setopt(_curlHandle, CURLOPT_TIMECONDITION, CURL_TIMECOND_NONE);
      }

    // "Engage." - J.L. Picard
    CURLcode rc1 = curl_easy_perform(_curlHandle);

    if (CURLE_OK == rc1)
      {
        if (_dataCameBack) // data came back
          {
            CURLcode rc2;

            char* effectiveURL = NULL;
            rc2 = curl_easy_getinfo(_curlHandle, CURLINFO_EFFECTIVE_URL, &effectiveURL);
            if (rc2==CURLE_OK && effectiveURL) _effectiveURL = effectiveURL;

            char* contentType = NULL;
            rc2 = curl_easy_getinfo(_curlHandle, CURLINFO_CONTENT_TYPE, &contentType);
            if (rc2==CURLE_OK && contentType) _contentType = contentType;

            curl_easy_getinfo(_curlHandle, CURLINFO_RESPONSE_CODE, &_responseCode);

            curl_easy_getinfo(_curlHandle, CURLINFO_TOTAL_TIME, &_fetchTime);

#if 0
            printf(">>>>>>>>>>>>>>>>>>> target URL %s\n", _targetURL.c_str());
            printf(">>>>>>>>>>>>>>>> effective URL %s\n", _effectiveURL.c_str());
            printf(">>>>>>>>>>>>>>>> content type %s\n", _contentType.c_str());
            printf(">>>>>>>>>>>>>>>> response code is %d\n", _responseCode);
            printf(">>>>>>>>>>>>>>>> total time is %lf\n", _fetchTime);
#endif

            long lastModTime;
            rc2 = curl_easy_getinfo(_curlHandle, CURLINFO_FILETIME, &lastModTime);
            if (rc2==CURLE_OK)
              {
                if (_incrementalFetch) // incremental mode
                  {
                    //  If the retrieval buffer is a superset of the cached file,
                    //   return the portion that is a proper superset (may be empty)
                    //  Else return the retrieval buffer

                    size_t bufSize = _curlBuffer.size();
                    size_t cacheSize = _fileCache.size();

                    // If the cache is empty and the retrieval buffer is not, return the entire buffer.
                    if (cacheSize == 0 && bufSize > 0)
                      result = _curlBuffer;

                    // If the retrieval buffer is smaller than the cached file, we take that as
                    // a signal that the file was completely refreshed, so return the entire buffer.
                    else if (bufSize < cacheSize)
                      result = _curlBuffer;

                    // At this point, we know the buffer is the same size as the cached file,
                    // or it is larger.

                    else if (bufSize == cacheSize)
                    // Files are same size.
                      {

                        // If cache and buffer have the same content, return empty string
                        // Otherwise return retrieval buffer
                        if (_curlBuffer.compare(_fileCache) == 0)
                          result.clear();
                        else
                          result = _curlBuffer;
                      }

                    else
                    // The buffer is larger than the cached file.
                      {
                        if (_curlBuffer.substr(0, cacheSize).compare(_fileCache)
                            == 0)
                          result = _curlBuffer.substr(cacheSize);
                        else
                          result = _curlBuffer;
                      }
                  }

                else // not incremental mode, return the retrieval buffer
                  {
                    result = _curlBuffer;
                  }

                //   Replace the file cache with the retrieval buffer
                _fileCache = _curlBuffer;
                // Resync the last modified time
                _lastModTime = lastModTime;
              }
            else
            // rc from getting the last mod time was nonzero

              {
                throw rc2;
              }
          } // data came back

        else // no data came back

          {
            long lastModTime;
            CURLcode rc2 = curl_easy_getinfo(_curlHandle, CURLINFO_FILETIME, &lastModTime);
            if (CURLE_OK == rc2)
              {
                // Leave the cached version of the file as-is
                // If incremental mode, return an empty string
                // Otherwise return the complete file value (our cached version of the file)
                if (_incrementalFetch)
                  result.clear();
                else
                  result = _fileCache;

                // Resync the last modified time
                if (lastModTime > -1)
                  _lastModTime = lastModTime;

              }
            else
              {
                throw rc2;
              }
          }
      }
    else // rc from performing the fetch was nonzero

      {
        throw rc1;
      }
    return result;
  }

void MY_OPERATOR::InetRetriever::reset()
  {
    _bytesTransferredTotal = _bytesTransferredLastFetch = 0;
    _curlBuffer.clear();
    _fileCache.clear();
    _lastModTime = -1;
    _dataCameBack = false;
    _responseCode = 0;
    _fetchTime = 0;
    _effectiveURL.clear();
    _contentType.clear();
  }

std::string MY_OPERATOR::InetRetriever::targetURL() const
  {
    return _targetURL;
  }

std::string MY_OPERATOR::InetRetriever::effectiveURL() const
  {
    return _effectiveURL;
  }

std::string MY_OPERATOR::InetRetriever::contentType() const
  {
    return _contentType;
  }

long MY_OPERATOR::InetRetriever::responseCode() const
  {
    return _responseCode;
  }

double MY_OPERATOR::InetRetriever::fetchTime() const
  {
    return _fetchTime;
  }

bool MY_OPERATOR::InetRetriever::updateURL(std::string newURL) {
    if (newURL != _targetURL) {
        reset();
        _targetURL = newURL;
        curl_easy_setopt(_curlHandle, CURLOPT_URL, newURL.c_str());
        return true;
    }
    return false;
  }

std::string MY_OPERATOR::InetRetriever::lastknownContents() const
  {
    return _fileCache;
  }

size_t MY_OPERATOR::InetRetriever::bytesTransferredTotal()
  {
    return _bytesTransferredTotal;
  }

size_t MY_OPERATOR::InetRetriever::bytesTransferredLastFetch()
  {
    return _bytesTransferredLastFetch;
  }

void MY_OPERATOR::InetRetriever::enableCurlTrace()
  {
    curl_easy_setopt(_curlHandle, CURLOPT_VERBOSE, 1);
  }

void MY_OPERATOR::InetRetriever::disableCurlTrace()
  {
    curl_easy_setopt(_curlHandle, CURLOPT_VERBOSE, 0);
  }

void MY_OPERATOR::InetRetriever::incrementalFetch()
  {
    _incrementalFetch = true;
  }

void MY_OPERATOR::InetRetriever::incrementalFetch(bool whether)
  {
    _incrementalFetch = whether;
  }

void MY_OPERATOR::InetRetriever::ignoreLastModTime()
  {
    _ignoreLastModTime = true;
  }

void MY_OPERATOR::InetRetriever::ignoreLastModTime(bool whether)
  {
    _ignoreLastModTime = whether;
  }

CURL* MY_OPERATOR::InetRetriever::curlHandle()
  {
    return _curlHandle;
  }

size_t MY_OPERATOR::InetRetriever::consumeData_static(void* buffer, const size_t recSize,
    const size_t numRecs, void* objPtr)
  {
    // Adapt the static callback from cURL to a non-static member function of this object instance
    return static_cast<InetRetriever*> (objPtr)->consumeData(buffer, recSize,
        numRecs);
  }

size_t MY_OPERATOR::InetRetriever::consumeData(const void* data, const size_t recSize,
    const size_t numRecs)
// Note: this method might be invoked many times by curl during a single fetch.  Each invocation
// supplies a chunk of the fetched data, and this method must assemble all the chunks.

  {
    // Flag that some data came back
    _dataCameBack = true;

    // Compute # of bytes in this chunk and increment counters accordingly
    size_t chunkSize = recSize * numRecs;
    _bytesTransferredTotal += chunkSize;
    _bytesTransferredLastFetch += chunkSize;

    // Append the chunk to the curlBuffer
    _curlBuffer.append((char*) data, chunkSize);

    // Curl requires that this function return the # of bytes processed during this invocation
    return chunkSize;
  }
