<%
# Copyright (C) 2010,2012,2014, International Business Machines Corporation. 
# All Rights Reserved.
%>
#include <vector>
#include<map>
#include<sstream>
#include <iostream>
#include <sstream>
#include <string>
#include <InetResource.h>

extern "C"
  {
#include<curl/curl.h>
  }




<%SPL::CodeGen::headerPrologue($model);%>




typedef std::map<std::string, std::string> URIQueryComponentsNVP_t;
typedef std::map<std::string, std::string>::iterator URIQueryComponentsNVP_it_t;
typedef std::map<std::string, std::string>::const_iterator URIQueryComponentsNVP_cit_t;

/// Return the input string with spaces suffixing it being removed
/// @param str input string
/// @param t character to be removed from right side of input string
/// @return input string without spaces suffixing it
inline std::string rtrim(const std::string& source,
  const std::string& t=" ") {
  std::string str=source;
  return str.erase(str.find_last_not_of(t)+1);
}

/// Return the input string with spaces prefixing it being removed
/// @param str input string
/// @param t character to be removed from left side of input string
/// @return input string without spaces prefixing it
inline std::string ltrim(const std::string& source,
  const std::string & t = " " ) {
  std::string str = source;
  return str.erase (0,source.find_first_not_of(t));
}

/// Return the input string with spaces suffixing and prefixing it being
/// removed
/// @param str input string
/// @param t character to be removed from left and right sides of input string
/// @return input string without spaces prefixing and suffixing it
inline std::string trim(const std::string& source,
  const std::string& t=" ") {
  std::string str=source;
  return ltrim(rtrim(str,t),t);
}



/// Converts a string to a different (numerical) type
/// @param t converted value
/// @param s input string
template <class T> void fromString(T& t, const std::string& s) {
  if (s.empty()) {
    t=static_cast<T>(0);
  }
  else {
    std::istringstream iss(s);
    iss >> t;
    if (iss.fail())
      //THROW(FailedConversion,"string '" << s << "' conversion failed");
      throw std::exception();
    if (!iss.eof())
      throw std::exception();
      //      THROW(SpuriousCharacterFound,"string '" << s << "' contains spurious character");
  }
}

class MY_OPERATOR : public MY_BASE_OPERATOR 
{
public:

@include "InetRetrieverH.cgt";
@include "URIHelperH.cgt";


public:

  // ----------- standard operator methods ----------

  MY_OPERATOR();
  virtual ~MY_OPERATOR(); 
  void allPortsReady(); 
  void prepareToShutdown(); 
  void process(uint32_t idx);

  // ----------- ???? ----------

  //???MY_OPERATOR(const MY_OPERATOR& op);
  //???MY_OPERATOR& operator=(const MY_OPERATOR& op);

  // ----------- InetSource operator methods  ----------

  void addRetriever(const std::string & url, int timeout);
  std::string checkURI(const std::string & url);

private:

  // ----------- operator state variables ----------

  std::string relFileProtocol;
  std::string absFileProtocol;
  std::vector<InetRetriever*> retrievers_;
  InetRetriever* retriever_;
  int timeout_;
  std::vector<std::pair<int,uint32_t> > retCodeCounts_;
  uint32_t inputLinesPerRecord_;
  SPL::rstring intraRecordPadValue_;
  SPL::float64 fetchInterval_;
  bool punctPerFetch_;
  int32_t iterations_;
  int32_t iteration_;
  uint32_t emitTuplePerRecordCount_;
  bool dynamicURL_;

  // ----------- operator output tuple ----------

  OPort0Type outputTuple;

  // ----------- assignment functions for output attributes ----------

  SPL::rstring TargetURL() { return retriever_->targetURL(); }
  SPL::rstring EffectiveURL() { return retriever_->effectiveURL(); }
  SPL::rstring ContentType() { return retriever_->contentType(); }
  SPL::int32 ResponseCode() { return retriever_->responseCode(); }
  SPL::float64 FetchTime() { return retriever_->fetchTime(); }

}; 

<%SPL::CodeGen::headerEpilogue($model);%>

