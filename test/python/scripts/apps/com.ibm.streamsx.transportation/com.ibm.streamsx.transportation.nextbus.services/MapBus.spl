namespace com.ibm.streamsx.transportation.nextbus.services;

// ************************************************************************
// * Copyright (C)2014,2016, International Business Machines Corporation and
// * others. All Rights Reserved.
// ************************************************************************

use com.ibm.streamsx.transportation.nextbus::NextBusLocationIdle ;
use com.ibm.streamsx.transportation.mapping::headingArrowValue ;
use com.ibm.streamsx.datetime.convert::*;
use com.ibm.streamsx.topology.topic::Subscribe;
use com.ibm.streamsx.topology.topic::Publish;
use com.ibm.streamsx.inet.rest::MarkerType;
use com.ibm.streamsx.inet.rest::MappedPositionIconLayer;

/**
 * Microservice that subscribes to all NextBusÂ® location streams
 * and publishes a single stream of locations suitable for mapping.
 *
 * The published mapped location stream sets:
 *  * `markerType`:
 *    * RED - Stationary
 *    * YELLOW - Bus is moving at less than or equal to 40km/h.
 *    * GREEN - Bus is moving at more than 40km/h.
 *    * WARNING - Bus is marked as idle
 *  * `layer`: NextBus agency
 *  * `note` : Note containing route, speed and if the bus is idle duration of the idleness.
 *
 *
 * Subscribes to:
 *  * topic: `streamsx/transportation/nextbus/+/locations`
 *  * type: [NextBusLocationIdle]
 *
 * Publishes:
 *  * topic: `streamsx/transportation/mapping/locations`
 *  * type: `com.ibm.streamsx.inet.rest::MappedPositionIconLayer`
 */
public composite MapBusLocations
{
	graph
           stream<NextBusLocationIdle> VLXWithIdle = Subscribe() {
              param
               topic: "streamsx/transportation/nextbus/+/locations";
               streamType: NextBusLocationIdle;
           }


                // Enriched last position of each bus, this will be
                // also be visible on the default map visualization
                // but has a marker colour specific to the bus's speed
                // and a more informative note.
		stream <MappedPositionIconLayer>
		       MVVL = Functor(VLXWithIdle) {
		       
		       logic state: mutable MarkerType marker;
		       onTuple VLXWithIdle: {
		          if (idle)
		               marker = MarkerType.WARNING;
		          else if (speedKmHr > 40.0)
		              marker = MarkerType.GREEN;
		          else if (speedKmHr == 0.0)
		              marker = MarkerType.RED;
		          else
		              marker = MarkerType.YELLOW;
		          }
		       
		       output MVVL:
		          note = routeTag + " (" + id + ") @ "
                                 + ((rstring) speedKmHr) + "km/h "
                                 + (idle ? ("Idle! " + (rstring) duration + "seconds"): headingArrowValue(heading)),
                          layer=agency,
		          markerType = (rstring) marker;
		}

                () as MappedBusLocations = Publish(MVVL) {
                   param
                    topic: "streamsx/transportation/mapping/locations";
                }
		
		config tracing: info;
}
