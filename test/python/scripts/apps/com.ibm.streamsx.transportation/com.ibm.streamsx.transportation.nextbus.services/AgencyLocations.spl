namespace com.ibm.streamsx.transportation.nextbus.services;

// ************************************************************************
// * Copyright (C)2014,2016 International Business Machines Corporation and
// * others. All Rights Reserved.
// ************************************************************************

use com.ibm.streamsx.transportation.nextbus::AgencyVehicleLocationPoll ;
use com.ibm.streamsx.transportation.nextbus::NextBusLocation ;
use com.ibm.streamsx.transportation.nextbus::NextBusLocationIdle ;
use com.ibm.streamsx.transportation.vehicle::IdleVehicleDetection ;
use com.ibm.streamsx.transportation.vehicle::VehicleIdle ;
use com.ibm.streamsx.datetime.convert::*;
use com.ibm.streamsx.topology.topic::*;

/**
 * NextBus® vehicle locations for an agency with idle bus detection.
 *
 * This is a streaming microservice that fetches NextBus® vehicle locations
 * for a single agency including idle bus detection. A single
 * stream is published containing bus locations and if the bus
 * has been idle beyond a configurable threshold.
 *
 * Published stream:
 *  * topic: `streamsx/transportation/nextbus/`*agency*`/locations`
 *  * type: [NextBusLocationIdle] and JSON
 *
 * This microservice can be submitted multiple times with different agencies.
 *
 * Downstream applications can subscribe to locations of vehicles
 * from all agencies currently running by using the topic filter:
 * `streamsx/transportation/nextbus/+/locations`.
 *
 *  
 * @param agency NextBus® agency, defaults to `sf-muni`.
 * @param period Polling period in seconds, must be greater than 10 seconds, defaults to 30.0.
 * @param idleMinutes Threshold in minutes for indicating a bus is idle. Defaults to 3.
 
 */
public composite AgencyLocationsService
{
    param
          expression<rstring> $agency : getSubmissionTimeValue("agency", "sf-muni");
	  expression<rstring> $period : getSubmissionTimeValue("period", "30.0");
	  expression<rstring> $idleMinutes : getSubmissionTimeValue("idleMinutes", "3");

	graph
		stream<NextBusLocation> VLX = AgencyVehicleLocationPoll()
		{
			param
				agency : $agency;
				period : (float64) $period;
		}

	   // Augment with info if the bus has  been idle for 3 minutes
       @view(name="NextBus® Locations", port=VLXWithIdle,
          description="NextBus® vehicle locations with idle detection: ",
          sampleSize=1000, bufferTime=300.0
          )
       stream<NextBusLocationIdle> VLXWithIdle = IdleVehicleDetection(VLX) {
          param minimumIdle: minutes((int32) $idleMinutes);
       }

               () as PVLXI = Publish(VLXWithIdle) {
                  param
                      topic: "streamsx/transportation/nextbus/" + $agency + "/locations";
               }

       stream<com.ibm.streamsx.json::Json> VLXWithIdleJson =
              com.ibm.streamsx.json::TupleToJSON(VLXWithIdle) {}
               () as PVLXIJson = Publish(VLXWithIdleJson) {
                  param
                      topic: "streamsx/transportation/nextbus/" + $agency + "/locations";
               }
}
