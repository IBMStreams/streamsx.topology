// ************************************************************************
// * Copyright (C)2014,2015, International Business Machines Corporation and
// * others. All Rights Reserved.
// ************************************************************************

namespace com.ibm.streamsx.transportation.nextbus ;

use com.ibm.streamsx.inet.http::HTTPGetXMLContent ;
use com.ibm.streamsx.datetime::currentTimeMillis ;
use com.ibm.streamsx.datetime::TimeMillis ;

/**
* Stream type for the structured representation of all the raw data items in 
* a location record, along with the document (query) timestamp.
* NOTE: rstring attributes only, to avoid conversion errors.
* 
* @exclude
*/
type RawVehicleLocation =
    rstring agency, // agency
    rstring nextbusId, //vehicle ID
    TimeMillis lastTime,
    rstring routeTag, // route ID
    rstring dirTag, // direction (inbound, outbound, etc.)
    rstring latitude, // in degrees
    rstring longitude, // in degrees
    rstring secsSinceReport, // seconds since last location update
    rstring predictable, // Is next arrival at a stop predictable?
                           // (convert to boolean before use)
    rstring heading, // direction of travel, degrees from north
    rstring speedKmHr ; // speed in km/h

/**
* Poll to fetch the raw vehicle locations.
* @exclude
*/
composite RawVehicleLocationPoll(output RawVehicleLocations )
{
	param
		expression<map<rstring,rstring>> $params ;
        expression<float64> $period : 30.0;
	graph
		stream<xml locationXMLDoc> RVLXML = HTTPGetXMLContent()
		{
                        logic state: map<rstring,rstring> _params = $params;
			param
				url : commandUrl("vehicleLocations", _params);
				period : validatePollingTime($period);
				updateParameter: "t";
				updateParameterFromContent: "/body/lastTime/@time";
		}

		// Extract the structured items from each XML record.
		(stream<RawVehicleLocation> RVL ;
			stream<map<rstring,rstring> params, TimeMillis lastTime> LastUpdate) as
			ExtractVehicleLocations = XMLParse(RVLXML)
		{
                        logic state: {
                                map<rstring,rstring> _params = $params;
                                rstring _agency = _params["a"];
                        }
			param
				trigger : "/body/vehicle" , "/body/lastTime";
				xmlInput : locationXMLDoc ;
				parsing : permissive ; // Recover from data errors; see below

			output
				RVL :
				/*
             * Data error handling relies on XPath and permissive parsing. 
             * when a requested attribute is missing, XPath returns an empty 
             * string; a numeric cast would then result in a default value 
             * (0 or 0.0). which may or may not be a legitimate value.
             * If a requested attribute is present but contains garbage, a
             * numeric cast may fail altogether, which would make the results 
             * for the entire tuple unpredictable and invalid, or worse.
             * Therefore, just get string results here and perform any numeric 
             * conversions, with appropriate protections, in the next operator.
             */
				nextbusId = XPath("@id"), routeTag = XPath("@routeTag"), dirTag =
					XPath("@dirTag"), latitude = XPath("@lat"), longitude = XPath("@lon"),
					secsSinceReport = XPath("@secsSinceReport"), predictable =
					XPath("@predictable"), heading = XPath("@heading"), speedKmHr =
					XPath("@speedKmHr"),
					agency = _agency;
			    LastUpdate: params = _params, lastTime = (TimeMillis) XPath("@time");
		}
		
		stream<RawVehicleLocation> RawVehicleLocations = Custom(RVL; LastUpdate) {
		logic
		state:
		{
		    mutable boolean seenVehicles = false;
		    mutable boolean seenTime = false;
		    mutable TimeMillis lt; mutable list<RawVehicleLocation> vehicles = [];
		}
		onTuple	RVL: { appendM(vehicles, RawVehicleLocations); }
		onTuple LastUpdate: { lt = lastTime; }
		onPunct LastUpdate:
		{
		    if (currentPunct() != Sys.WindowMarker)
		        return;
		    seenTime = true;
		    if (seenTime && seenVehicles) {
		        mutable RawVehicleLocation t = {};		        
		        for (RawVehicleLocation vehicle in vehicles) {
		            assignFrom(t, vehicle);
		            t.lastTime = lt;
		            submit(t, RawVehicleLocations);
		        }
		        seenTime = false;
		        seenVehicles = false;
		        clearM(vehicles);
		    }
		}  
		onPunct RVL:
		{
		    if (currentPunct() != Sys.WindowMarker)
		        return;
		    seenVehicles = true;
		    if (seenTime && seenVehicles) {
		        mutable RawVehicleLocation t = {};
		        for (RawVehicleLocation vehicle in vehicles) {
		            assignFrom(t, vehicle);
		            t.lastTime = lt;
		            submit(t, RawVehicleLocations);
		        }
		        seenTime = false;
		        seenVehicles = false;
		        clearM(vehicles);
		    }
		}
		}
}

/**
 * Poll to get the raw vehicle locations for a single agency.
 * @param agency Agency to fetch the raw data from.
 * @param period Period in seconds to poll the NextBus API, must not be less than 10. Defaults to 30.
 * @exclude
 */
public composite AgencyRawVehicleLocationPoll(output RawVehicleLocations )
{
	param
		expression<rstring> $agency ;
                expression<float64> $period : 30.0;
	graph
		stream<RawVehicleLocation> RawVehicleLocations = RawVehicleLocationPoll()
		{
			param
			    params: {"a":$agency, "t":(rstring) currentTimeMillis()};
				period : $period;
		}
}
