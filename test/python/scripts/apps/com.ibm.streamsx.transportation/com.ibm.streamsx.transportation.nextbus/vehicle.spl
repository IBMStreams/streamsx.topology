// ************************************************************************
// * Copyright (C)2014,2015, International Business Machines Corporation and
// * others. All Rights Reserved.
// ************************************************************************

namespace com.ibm.streamsx.transportation.nextbus;

use com.ibm.streams.geospatial.twodimension.geometry::* ;
use com.ibm.streamsx.datetime::TimeMillis ;
use com.ibm.streamsx.transportation.vehicle::VehicleLocation;
use com.ibm.streamsx.transportation.vehicle::VehicleIdle ;

/**
 * NextBus vehicle location.
 * 
 * * id - *nextbusId*`:`*agency*`:nextbus` - Unique identifier to allow use of id in operators that utilize a single attribute for an identifier.
 * * reportTime - Last report time of vehicle (milliseconds since 1970)
 * * latitude - Vehicle latitude
 * * longitude - Vehicle longitude
 * * agency - Nextbus agency
 * * nextbusId - Nextbus identifier reported by NextBus (as `id`)
 * * routeTag - Route identifier
 * * dirTag - Direction the vehicle is on
 * * predictable - Is next arrival at a stop predictable?
 * * heading - direction of travel, degrees from north
 * * speedKmHr - speed in km/h
 */
type NextBusLocation =
    VehicleLocation,
    tuple<
    rstring agency, // agency
    rstring nextbusId, // next bus vehicle id
    rstring routeTag, // route ID
    rstring dirTag, // direction (inbound, outbound, etc.)
    boolean predictable, // Is next arrival at a stop predictable?
    int16 heading, // direction of travel, degrees from north
    float64 speedKmHr // speed in km/h
    >; 
 
/**
 * NextBus vehicle location with Idle.
 *
 * Combination of [NextBusLocation] and [VehicleIdle].
*/
type NextBusLocationIdle = NextBusLocation, VehicleIdle;
 
/**
 * Poll to get the vehicle locations for a single agency.
 * 
 * The output scheme is required to be [NextBusLocation].
 * 
 * @param agency Agency to fetch the raw data from.
 * @param period Period in seconds to poll the NextBus API, must not be less than 10. Defaults to 30.
 * 
 * @output VehicleLocations Locations of vehicles for `agency`.
 */
public composite AgencyVehicleLocationPoll(output stream<NextBusLocation> VehicleLocations)
{
	param
		expression<rstring> $agency ;
                expression<float64> $period : 30.0;
	graph
		stream<RawVehicleLocation> RawVehicleLocations = AgencyRawVehicleLocationPoll()
		{
			param
			    agency: $agency;
				period : $period;
		}
		stream<NextBusLocation> VehicleLocations = CookVehicleLocation(RawVehicleLocations) {}
}   

/**
 * Turn the raw locations into [NextBusLocation].
 * @exclude
 */
public composite CookVehicleLocation(
     input stream<RawVehicleLocation> RawVehicleLocations;
     output stream<NextBusLocation> VehicleLocations)
{
   graph
   stream<NextBusLocation> VehicleLocations = Custom(RawVehicleLocations)
   {
       logic onTuple RawVehicleLocations:
       {
           // First ensure we can parse the numeric data successfully.
           mutable int64 heading_ = 0l;
           if (parseNumber(heading_, heading) == -1)
               return;
           mutable float64 speedKmHr_ = 0.0;
           if (parseNumber(speedKmHr_, speedKmHr) == -1)
               return;
               
           mutable float64 latitude_ = 0.0;
           if (parseNumber(latitude_, latitude) == -1)
               return;          
           mutable float64 longitude_ = 0.0;
           if (parseNumber(longitude_, longitude) == -1)
               return;
               
           mutable TimeMillis secsSinceReport_ = 0l;
           if (parseNumber(secsSinceReport_, secsSinceReport) == -1)
               return;
    
           mutable NextBusLocation v = {};
           assignFrom(v, RawVehicleLocations);
           v.id = nextbusId + ":" + agency + ":nextbus";
           v.predictable = "true" == lower(predictable);
           v.heading = (int16) heading_;
           v.speedKmHr = speedKmHr_;
           v.latitude = latitude_;
           v.longitude = longitude_ ;
           v.reportTime = lastTime - (secsSinceReport_ * 1000l);
           
           
           submit(v, VehicleLocations);
       }
   }
}
