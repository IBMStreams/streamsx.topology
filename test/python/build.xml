<project name="streamsx.topology.test.python" default="all"
    xmlns:jacoco="antlib:org.jacoco.ant"
    >
    <description>
        Build the Streams Python tests.
    </description>
	
	<property name="testtk" location="spl/testtkpy"/>
	<property name="testtk_pip_op" location="spl/testtkpy_pip_op"/>
	<property name="testtk_pip_tk" location="spl/testtkpy_pip_toolkit"/>
	<property name="topology" location="topology"/>
        <property name="test.dir" location="unittests"/>

  <import file="../../common-build.xml"/>

    <property name="topology.toolkit.release" location="${tk}" />
    <echo message="Topology toolkit release: ${topology.toolkit.release}"/>

  <target name="test" depends="all,test.application.api,test.translation"/> 

  <target name="all"> 
	  <copy file="../../samples/python/com.ibm.streamsx.topology.pysamples/opt/python/streams/spl_samples.py"
	  	toDir="${testtk}/opt/python/streams"/>
	  <copy file="../../samples/python/com.ibm.streamsx.topology.pysamples/opt/python/streams/spl_kwargs.py"
	  	toDir="${testtk}/opt/python/streams"/>
	  <copy file="../../samples/python/com.ibm.streamsx.topology.pysamples/opt/python/streams/spl_sources.py"
	  	toDir="${testtk}/opt/python/streams"/>
	  <copy file="../../samples/python/com.ibm.streamsx.topology.pysamples/info.xml"
	  	toDir="${testtk}"/>
   </target>

   <!-- Allow the pattern of tests to run be set
       ant test.single -Dtopology.unittest.name='test2_pkg.TestPackages.test_TopologySymlinkFile'
   -->
   <property name="topology.unittest.name" value="test2_pkg.TestPackages.test_TopologySymlinkDir"/>

	  <target name="test.single">
             <mkdir dir="${test.dir}"/>
             <tempfile property="pytests.test.dir" prefix="testrun" destDir="${test.dir}"/>
             <mkdir dir="${pytests.test.dir}"/>
	     <echo message="Topology python: ${topology.test.python}"/>
             <echo message="unittest name: ${topology.unittest.name}"/>
		   <exec executable="${topology.test.python}" dir="${pytests.test.dir}" failonerror="true">
		     <env key="PYTHONPATH" value="${topology.toolkit.release}/opt/python/packages:${topology}"/>
		     <arg value="-u"/>
		     <arg value="-m"/>
		     <arg value="unittest"/>
		     <arg value="${topology.unittest.name}"/>
		     <arg value="-v"/>
		   </exec>
	   </target>

	  <target name="test.distributed">
             <mkdir dir="${test.dir}"/>
             <tempfile property="pytests.test.dir" prefix="testrun" destDir="${test.dir}"/>
             <mkdir dir="${pytests.test.dir}"/>
	     <echo message="Topology python: ${topology.test.python}"/>
		   <exec executable="${topology.test.python}" dir="${pytests.test.dir}" failonerror="true">
		     <env key="PYTHONPATH" value="${topology.toolkit.release}/opt/python/packages:${topology}"/>
		     <arg value="-u"/>
		     <arg value="-m"/>
		     <arg value="unittest"/>
		     <arg value="test2.TestDistributedTopologyMethodsNew"/>
		     <arg value="test2_checkpoint.TestDistributedCheckpointing"/>
		     <arg value="test2_consistent.TestDistributedConsistentRegion"/>
		     <arg value="test2_ec.TestDistributedEc"/>
		     <arg value="test2_pending.TestDistributedPending"/>
		     <arg value="test2_pubsub.TestDistributedPubSub"/>
		     <arg value="test2_spl2python.TestDistributedSPL"/>
		     <arg value="test2_udp.TestDistributedUDP"/>
		     <arg value="test2_views.TestDistributedViews"/>
		     <arg value="-v"/>
		   </exec>
	   </target>

	  <target name="test.sas">
             <mkdir dir="${test.dir}"/>
             <tempfile property="pytests.test.dir" prefix="testrun" destDir="${test.dir}"/>
             <mkdir dir="${pytests.test.dir}"/>
	     <echo message="Topology python: ${topology.test.python}"/>
		   <exec executable="${topology.test.python}" dir="${pytests.test.dir}" failonerror="true">
		     <env key="PYTHONPATH" value="${topology.toolkit.release}/opt/python/packages:${topology}"/>
		     <arg value="-u"/>
		     <arg value="-m"/>
		     <arg value="unittest"/>
		     <arg value="test2.TestSasTopologyMethodsNew"/>
		     <arg value="test2_checkpoint.TestSasCheckpointing"/>
		     <arg value="test2_consistent.TestSasConsistentRegion"/>
		     <arg value="test2_ec.TestSasEc"/>
		     <arg value="test2_job_config.TestSasJobConfig"/>
		     <arg value="test2_names.TestSasNames"/>
		     <arg value="test2_pending.TestSasPending"/>
		     <arg value="test2_pkg.TestSasPackages"/>
		     <arg value="test2_placement.TestSasPlacement"/>
		     <arg value="test2_pubsub.TestSasPubSub"/>
		     <arg value="test2_spl.TestSasSPL"/>
		     <arg value="test2_spl2python.TestSasSPL"/>
		     <arg value="test2_submission_params.TestSasSubmissionParams"/>
		     <arg value="test2_submission_result.TestSasSubmissionResult"/>
		     <arg value="test2_unicode.TestSasUnicode"/>
		     <arg value="test2_udp.TestSasUDP"/>
		     <arg value="test2_views.TestSasViews"/>
		     <arg value="-v"/>
		   </exec>
	   </target>

	  <target name="test.application.api">
             <mkdir dir="${test.dir}"/>
             <tempfile property="pytests.test.dir" prefix="testrun" destDir="${test.dir}"/>
             <mkdir dir="${pytests.test.dir}"/>
	     <echo message="Topology python: ${topology.test.python}"/>
		   <exec executable="${topology.test.python}" dir="${pytests.test.dir}" failonerror="true">
		     <env key="PYTHONPATH" value="${topology.toolkit.release}/opt/python/packages:${topology}"/>
		     <arg value="-u"/>
		     <arg value="-m"/>
		     <arg value="unittest"/>
		     <arg value="discover"/>
		     <arg value="${topology}"/>
		     <arg value="-v"/>
		   </exec>
	   </target>
	   
	  <target name="test.mqtt.application.api">
		   <exec executable="${topology.test.python}" dir="${topology}" failonerror="true">
		     <env key="PYTHONPATH" value="${topology.toolkit.release}/opt/python/packages"/>
		     <arg value="mqtest1.py"/>
		   </exec>
	   </target>	   


    <target name="test.translation" description="Run the translation tests">
        <exec executable="/bin/bash" dir="spl/translation" failonerror="true">
            <env key="PYTHONHOME" value="${topology.test.python.prefix}"/>
            <arg value="autorun.sh"/>
        </exec>
    </target>

</project>
