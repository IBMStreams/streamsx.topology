// begin_generated_IBM_copyright_prolog                             
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// Licensed Materials - Property of IBM                             
// 5724-Y95                                                         
// (C) Copyright IBM Corp.  2016, 2016    All Rights Reserved.      
// US Government Users Restricted Rights - Use, duplication or      
// disclosure restricted by GSA ADP Schedule Contract with          
// IBM Corp.                                                        
//                                                                  
// end_generated_IBM_copyright_prolog                               
namespace testspl;

use com.ibm.streamsx.topology.topic::*;

/**
  Simple filter to test testing of
  an SPL composite.
*/
public composite Int32Filter(input In; output Out) {
    param
        attribute $attr;
        expression<int32> $value;
    graph
    stream<In> Out = Filter(In) {
       param
          filter: $attr == $value;
    }
}

/**
  Simple filter to test testing of
  an SPL operator with multiple outputs.
*/
public composite Int32FilterPF(input In; output Pass,Fail) {
    param
        attribute $attr;
        expression<int32> $value;
    graph
    (stream<In> Pass;stream<In> Fail) as F = Filter(In) {
       param
          filter: $attr == $value;
    }
}

// this is a publish that matches the 1.1.3 version
// before allow filter was added. Used for backwards
// compat testing.
public composite Publish113(input In)
{
        param
                expression<rstring> $topic ;
        graph
                () as ExportTopic = Export(In)
                {
                param
                  properties :
                  {
                     __spl_exportType = "topic",
                     __spl_topic = $topic
                  };
                }
}

type TestType = int32 id, int32 vi, int64 vl;

/**
  Simple filter to test testing of
  an SPL composite that subscribes to
  both the allow filters and not allow filters.
*/
public composite Int64SubscribeFilter(output stream<TestType> Out) {
    param
        expression<rstring> $topic;
        expression<int64> $value;
    graph

     stream<TestType> Out = FilteredSubscribe()
     {
        param
          topic: $topic;
          streamType: TestType;
          remoteFilter: equalsFilter("vl", $value);
          localFilterFunction: testspl::testvl;
          localFilterParameter: $value;
     }
}

public boolean testvl(TestType t, int64 v) {
   return t.vl == v;
}
