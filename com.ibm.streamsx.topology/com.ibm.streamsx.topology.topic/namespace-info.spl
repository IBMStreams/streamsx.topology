/*
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2015  
 */
 
/**
 * Topic based publish-subscribe model for streams.
 * + Publish-subscribe Overview
 * Applications can publish streams to topics which
 * can then be subscribed to by other applications
 * (or even the same application). Publish-subscribe
 * works across applications written in SPL and
 * those written using application APIs
 * provided by this toolkit.
 *
 * A subscriber matches a publisher if their topic
 * and stream type are an exact match to that of the publisher.
 * It is recommended that a single stream type is used for a topic.
 *
 * A topic is a `rstring` value (encoded with UTF-8), it is recommended that the
 * [http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#appendix-a|MQTT topic style]
 * is used, and that topic names do not
 * include wild-cards. Future versions may support subscription
 * by MQTT style wild cards (e.g. `cdr/voice/\*`).
 * 
 * Publish-subscribe is a many to many relationship,
 * any number of publishers can publish to the same topic
 * and stream type, and there can be many subscribers to a topic.
 *
 * For example a telco ingest application may process
 * Call Detail Records from network switches and publish processed
 * records on multiple topics, `cdr/voice/normal`, `cdr/voice/dropped`, `cdr/sms`, etc.
 * by publishing each processed stream with its own topic.
 * Then a dropped call analytic application would subscribe to the
 * `cdr/voice/dropped` topic.
 *
 * Publish-subscribe is dynamic, using IBM Streams
 * dynamic connections, an application
 * can be submitted that subscribes to topics
 * published by other already running applications.
 * Once the new application has initialized, it will
 * start consuming tuples from published streams from existing applications.
 * And any stream the new application publishes will be subscribed to
 * by existing applications where the topic and stream type matches.
 *
 * An application only receives tuples that are published while
 * it is connected, thus tuples are lost during a connection
 * failure.
 * 
 * # SPL Publish-Subscribe
 * An SPL application uses [Publish] to publish a stream to a topic, and [Subscribe] and/or [FilteredSubscribe] to subscribe to a topic.
 *
 * # Java & Scala Publish-Subscribe
 * A Java application uses [../../javadoc/com/ibm/streamsx/topology/TStream.html#publish(java.lang.String)|TStream.publish(topic)]
 * to publish streams.
 * 
 * # Interchangeable Stream Types
 * 
 * Published streams can be subscribed to by IBM Streams applications
 * written in different languages, by ensuring common stream types (schemas).
 * 
 * * SPL Tuples
 *   * SPL : SPL schema of the stream.
 *   * Java : [../../javadoc/com/ibm/streamsx/topology/spl/SPLStream.html|SPLStream] with a schema matching the SPL schema.
 *   * Scala : `com.ibm.streamsx.topology.spl.SPLStream` with a schema matching the SPL schema.
 * * JSON tuples
 *   * SPL : [com.ibm.streamsx.topology::Json]  
 *   * Java: `TStream<JSONObject>`.
       See [../../javadoc/com/ibm/streamsx/topology/json/package-summary.html#package_description|com.ibm.streamsx.topology.json].
 *   * Scala: `TStream\[JSONObject\]`
 * * String tuples
 *   * SPL : [com.ibm.streamsx.topology::String]
 *   * Java: `TStream<String>`
 *   * Scala: `TStream\[String\]`
 * * XML tuples
 *   * SPL : [com.ibm.streamsx.topology::XML]
 *   * Java: `TStream<com.ibm.streams.operator.types.XML>`
 *   * Java: `TStream\[com.ibm.streams.operator.types.XML\]`
 * * Binary tuples
 *   * SPL : [com.ibm.streamsx.topology::Blob]
 *   * Java: `TStream<com.ibm.streams.operator.types.Blob>`
 *   * Scala: `TStream\[com.ibm.streams.operator.types.Blob\]`
 *
 * + Relationship to Export & Import
 * Publish-subscribe is a simplification of IBM Streams `Export` and `Import`.
 * 
 * It is recommended that SPL applications do not use stream properties for
 * `Export` that start with `__spl_` (double underscore - spl - underscore)
 * to avoid clashes with functionality provided by this toolkit.
 *
*/

namespace com.ibm.streamsx.topology.topic;

