namespace com.ibm.streamsx.topology.topic ;

use com.ibm.streamsx.topology::String;

/**
 * Publish a stream to a topic. Allows other IBM Streams
 * applications to subscribe to the input stream, including
 * those written in different languages.
 * See [namespace:com.ibm.streamsx.topology.topic] for details.
 * @input In Stream to be published as a topic.
 * @param topic Topic to publish stream to.
*/
public composite Publish(input In )
{
	param
		expression<rstring> $topic ;
	graph
		() as ExportTopic = Export(In)
		{
			param
				properties : { __spl_exportType = "topic", __spl_topic = $topic } ;
		}

}

/**
 * Subscribe to a topic.
 * Generates a stream that is subscribed, through
 * IBM Streams dynamic connections, to all streams
 * published to the same `topic` and `streamType`.
 * See [namespace:com.ibm.streamsx.topology.topic] for details.
 
 * @output Topic Subscription to `topic`.
 * @param topic Topic to subscribe to.
 * @param streamType Type of output stream `Topic`.
*/
public composite Subscribe(output Topic )
{
	param		
		expression<rstring> $topic ;
		type $streamType ;
	graph
		stream<$streamType> Topic = Import()
		{
			param
				subscription : __spl_exportType == "topic" && __spl_topic == $topic ;
		}

}

/**
 * Subscribe to a topic that is a stream of `String` tuples.
 * Generates a stream that is subscribed, through
 * IBM Streams dynamic connections, to all streams
 * published to the same `topic` with type [String].
 * See [namespace:com.ibm.streamsx.topology.topic] for details.
 
 * @output Topic Subscription to `topic`.
 * @param topic Topic to subscribe to.
*/
public composite SubscribeString(output stream<String> Topic)
{
	param		
		expression<rstring> $topic ;
        graph
             stream<String> Topic = Subscribe() {
                 param
                      topic: $topic;
                      streamType: String;
             }
}
