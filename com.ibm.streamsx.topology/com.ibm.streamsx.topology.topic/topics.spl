namespace com.ibm.streamsx.topology.topic ;

/**
 * Publish a stream to a topic. Allows other IBM Streams
 * applications to subscribe to the input stream, including
 * those written in different languages.
 *
 * When `allowFilter` is `true` then any matching [SubscribeFilter]
 * operator invocation will push its filter into the application
 * invoking this operator. This optimizes network performance by only
 * sendinf tuples the subcriber is interested in, at the expense
 * of processing in the publishing application.
 *
 * When `allowFilter` is `false` then any matching [SubscribeFilter]
 * operator invocations will execute its filter in its own application.
 *
 * See [namespace:com.ibm.streamsx.topology.topic] for details.
 *
 * @input In Stream to be published as a topic.
 * @param topic Topic to publish stream to.
 * @param allowFilter True if filters can be pushed from
 *  subscribing applications. Optional, defaults to `false`.
*/
public composite Publish(input In )
{
	param
		expression<rstring> $topic ;
                expression<boolean> $allowFilter : false;
	graph
		() as ExportTopic = Export(In)
		{
                param
                  properties :
                  {
                    __spl_exportVersion=1,
                    __spl_exportType = "TOPIC",
                    __spl_topic = $topic,
                    __spl_allowFilter = $allowFilter
                  };
                  allowFilter: $allowFilter;
		}

}

/**
 * Subscribe to a topic.
 * Generates a stream that is subscribed, through
 * IBM Streams dynamic connections, to all streams
 * published to the same `topic` and `streamType`.
 * See [namespace:com.ibm.streamsx.topology.topic] for details.
 
 * @output Topic Subscription to `topic`.
 * @param topic Topic to subscribe to.
 * @param streamType Type of output stream `Topic`.
*/
public composite Subscribe(output Topic )
{
	param		
		expression<rstring> $topic ;
		type $streamType ;
	graph
		stream<$streamType> Topic = Import()
		{
			param
				subscription : 
        // Applications compiled with version 1.1.3
        (__spl_exportType == "topic" && __spl_topic == $topic )
        ||
        // Applications compiled with version >= 1.1.4
        (__spl_exportType >= 1 && __spl_exportType == "TOPIC"
                && __spl_topic == $topic )
	}
}

/**
 * Subscribe to a filtered subset of a topic.
 * Generates a stream that is subscribed, through
 * IBM Streams dynamic connections, to all streams
 * published to the same `topic` and `streamType`.
 *
 * The filter expression is limited to filter
 * expressions supported by the IBM Streams `Import` operator.
 *
 * If a matching [Publish] operator allows filter expressions
 * then the expression is pushed to the publishing application.
 * Otherwise the filter expression is executed within this
 * application by this operator.
 * 
 * See [namespace:com.ibm.streamsx.topology.topic] for details.
 
 * @output Topic Subscription to `topic`.
 * @param topic Topic to subscribe to.
 * @param filter Filter expression.
 * @param streamType Type of output stream `Topic`.
*/
public composite SubscribeWithFilter(output Topic )
{
	param		
		expression<rstring> $topic ;
                expression<boolean> $filter;
		type $streamType ;
	graph
        // Import with no filtering applied.
        stream<$streamType> NotFiltered = Import()
        {	
        param
          subscription : 
        // Applications compiled with version 1.1.3
        // (no filtering supported at all)
        (__spl_exportType == "topic" && __spl_topic == $topic )
        ||
        // Applications compiled with version >= 1.1.4
        (__spl_exportType >= 1 && __spl_exportType == "TOPIC"
                && __spl_allowFilter == false
                && __spl_topic == $topic )
	}

        // Apply the filter on this side
        stream<$streamType> FilteredAfterImport = Filter(NotFiltered) {
        param
             filter: $filter;
        }

        // Import with filtering applied.
        stream<$streamType> FilteredByExport = Import()
        {	
        param
          subscription : 
        // Applications compiled with version >= 1.1.4
        (__spl_exportType >= 1 && __spl_exportType == "TOPIC"
                && __spl_allowFilter == true
                && __spl_topic == $topic )
	}

        // Only needed as you cannot merge two streams into
        // a composite output port
        stream<$streamType> Topic = Filter(FilteredAfterImport,FilteredByExport) {
        }
}

/*
* Publish Properties Notes:
* 1.1.3
       __spl_exportType = "topic"
       __spl_topic = $topic
*
* 1.1.4
*   Publish: 
        __spl_exportVersion=1,
        __spl_exportType = "TOPIC",
        __spl_topic = $topic,
        __spl_allowFilter = $allowFilter
*
*/
