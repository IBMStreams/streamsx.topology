<%
# Generates a function in an operator that converts a Python
# tuple to an SPL tuple for a given port.
#
# $oport must be set on entry to required output port
# $iport can be set to automatically copy input attributes to
# output attributes when the Python tuple does not supply a value.

  my $itypeparam = "";
  if (defined $iport) {
     $itypeparam = ", " . $iport->getCppTupleType() . " const & ituple";
  }
%>
 
// Python tuple to SPL tuple
void MY_OPERATOR::fromPythonToPort<%=$oport->getIndex()%>(PyObject *pyTuple <%=$itypeparam%>) {

  <%=$oport->getCppTupleType()%> otuple;

try {

  Py_ssize_t frs = PyTuple_GET_SIZE(pyTuple); 
    
<%
  if (defined $iport) {
    print 'bool setAttr = false;';
  }

  for (my $ai = 0; $ai < $oport->getNumberOfAttributes(); ++$ai) {
    
    my $attribute = $oport->getAttributeAt($ai);
    my $name = $attribute->getName();
    my $atype = $attribute->getSPLType();
    splToPythonConversionCheck($atype);
    
    if (defined $iport) {
             print 'setAttr = false;';
    }
%>
    if (<%=$ai%> < frs) {
         // Value from the Python function
         PyObject *pyAttrValue = PyTuple_GET_ITEM(pyTuple, <%=$ai%>);
         if (!SplpyGeneral::isNone(pyAttrValue)) {
                  streamsx::topology::pySplValueFromPyObject(
                               otuple.get_<%=$name%>(), pyAttrValue);
<%
    if (defined $iport) {
             print 'setAttr = true;';
    }
%>
      }
   }
<%
    if (defined $iport) {
    
    # Only copy attributes across if they match on name and type,
    # or on name and input type T and output type optional<T>
    my $matchInputAttr = $iport->getAttributeByName($name);
    if (defined $matchInputAttr) {
        my $inputType = $matchInputAttr->getSPLType();
        if (($inputType eq $atype) ||
            (hasOptionalTypesSupport() &&
             SPL::CodeGen::Type::isOptional($atype) &&
             ($inputType eq
              SPL::CodeGen::Type::getUnderlyingType($atype)))) {
%>
    if (!setAttr) {
      // value from the input attribute
      otuple.set_<%=$name%>(ituple.get_<%=$name%>());
    }
<%
      }
    }
   }
%>
         
<%
}
 %>

 } catch (const streamsx::topology::SplpyExceptionInfo& excInfo) {
    SPLPY_OP_HANDLE_EXCEPTION_INFO(excInfo);
    return;
 }

 STREAMSX_TUPLE_SUBMIT_ALLOW_THREADS(otuple, <%=$oport->getIndex()%>);
}

// Python dict to SPL tuple
void MY_OPERATOR::fromPythonDictToPort<%=$oport->getIndex()%>(PyObject *pyDict <%=$itypeparam%>) {

  <%=$oport->getCppTupleType()%> otuple;

try {

  Py_ssize_t available = PyDict_Size(pyDict); 
    
<%
  if (defined $iport) {
    print 'bool setAttr = false;';
  }

  for (my $ai = $oport->getNumberOfAttributes() - 1; $ai >= 0; --$ai) {
    
    my $attribute = $oport->getAttributeAt($ai);
    my $name = $attribute->getName();
    my $atype = $attribute->getSPLType();
    splToPythonConversionCheck($atype);
    
    if (defined $iport) {
             print 'setAttr = false;';
    }
%>
    if (available > 0) {
         // Value from the Python function
         PyObject *pyAttrValue = PyDict_GetItem(pyDict, PyTuple_GET_ITEM(pyOutNames_<%=$oport->getIndex()%>, <%=$ai%>));
         if (pyAttrValue != NULL) {
             --available;
             if (!SplpyGeneral::isNone(pyAttrValue)) {
                  streamsx::topology::pySplValueFromPyObject(
                               otuple.get_<%=$name%>(), pyAttrValue);
<%
    if (defined $iport) {
             print 'setAttr = true;';
    }
%>
           }
        }
   }
<%
    if (defined $iport) {
    
    # Only copy attributes across if they match on name and type
    my $matchInputAttr = $iport->getAttributeByName($name);
    if (defined $matchInputAttr) {
       if ($matchInputAttr->getSPLType() eq $attribute->getSPLType()) {
%>
    if (!setAttr) {
      // value from the input attribute
      otuple.set_<%=$name%>(ituple.get_<%=$name%>());
    }
<%
      }
    }
   }
%>
         
<%
}
 %>

 } catch (const streamsx::topology::SplpyExceptionInfo& excInfo) {
    SPLPY_OP_HANDLE_EXCEPTION_INFO(excInfo);
    return;
 }

 STREAMSX_TUPLE_SUBMIT_ALLOW_THREADS(otuple, <%=$oport->getIndex()%>);
}
