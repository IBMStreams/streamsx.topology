<% 
 # Enable or disable checkpointing, including support for the necessary locking.

 # Checkpointing should be enabled if the operator is in a consistent region,
 # or has checkpointing configured.  Also, the operator must be stateful,
 # otherwise no checkpointing is needed.

 # This will generally be @included in the declaration of an SPL operator
 # template.  It create static const values indicating whether the operator
 # instance is in a consistent region, and whether it is checkpointing.
 # It also provides some typedefs for types to be used by the operator
 # to support checkpointing and consistent region.

 my $isInConsistentRegion = $model->getContext()->getOptionalContext("ConsistentRegion");
 my $ckptKind = $model->getContext()->getCheckpointingKind();
 my $pyStateful = $model->getParameterByName("pyStateful");
 my $stateful = 0;
 if (defined($pyStateful)) {
   $stateful = $pyStateful->getValueAt(0)->getSPLExpression() eq "true";
 }
 else {
   # no pyStateful parameter.  Try calling splpy_OperatorCallable().
   if (defined &splpy_OperatorCallable) {
     $stateful = splpy_OperatorCallable() eq 'class'
   }
 }

 my $isCheckpointing = $stateful && ($isInConsistentRegion or $ckptKind ne "none");
%>
  // True if this operator is in a consistent region.
  static const bool isInConsistentRegion = <%= $isInConsistentRegion ? "true" :" false" %>;
  // True if operator is stateful and checkpoint is enabled, 
  // whether directly or through consistent region.
  static const bool isCheckpointing = <%=$isCheckpointing ? "true" : "false" %>;

  typedef OptionalConsistentRegionContextImpl<isInConsistentRegion> OptionalConsistentRegionContext;
  typedef OptionalConsistentRegionContext::Permit AutoConsistentRegionPermit;
  typedef OptionalAutoLockImpl<isCheckpointing> OptionalAutoLock;


