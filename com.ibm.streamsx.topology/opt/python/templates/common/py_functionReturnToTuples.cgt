   // Calls the Python function and
   // converts the returned value into
   // SPL Tuples and submits them.
   // Returns if the Python function returns None.

    PyObject * pyReturnVar = PyObject_Call(function_, pyTuple, pyDict);

    Py_DECREF(pyTuple);
    if (pyDict != NULL)
        Py_DECREF(pyDict);

    if (pyReturnVar == NULL) {
        SPLAPPTRC(L_ERROR, "Fatal error: function failed: " << "<%=$functionName%>", "python");
       
        streamsx::topology::flush_PyErr_Print();
        throw;
    }

    if (pyReturnVar == Py_None) {
         Py_DECREF(pyReturnVar);
         <%=$no_tuples_action%>
         return;
    }
if (!PyTuple_Check(pyReturnVar) && !PyList_Check(pyReturnVar)) {
        SPLAPPTRC(L_ERROR, "Fatal error: function must return a Python Tuple or a Python List: " << "<%=$functionName%>", "python");
        throw;
    }

<%
  my $ituplearg = "";
  if (defined $iport) {
     $ituplearg = ", " . $iport->getCppTupleName();
  }
%>

if(PyTuple_Check(pyReturnVar)){    
  OPort0Type otuple;    
  fromPythonToPort<%=$oport->getIndex()%>(pyReturnVar, otuple <%=$ituplearg%>);
  output_tuples.push_back(otuple);
}

/* Logic for if a list of tuples is returned */

 else if(PyList_Check(pyReturnVar)){
   Py_ssize_t tc = PyList_Size(pyReturnVar);
   for(int k = 0; k < tc; k++){    
     PyObject *ltuple = PyList_GET_ITEM(pyReturnVar, k);
     if (ltuple == Py_None) continue;
     if(!PyTuple_Check(ltuple)){    
     }
     
     OPort0Type otuple;
     fromPythonToPort<%=$oport->getIndex()%>(ltuple, otuple <%=$ituplearg%>);
     output_tuples.push_back(otuple);
   }
}

Py_DECREF(pyReturnVar);
