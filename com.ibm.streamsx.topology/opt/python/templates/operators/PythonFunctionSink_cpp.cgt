/*
 * # Licensed Materials - Property of IBM
 * # Copyright IBM Corp. 2015  
 */

#include <Python.h>
#include <string>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>

#include "splpy.h"

<%SPL::CodeGen::implementationPrologue($model);%>

<%
 my $cmnDir = $model->getContext()->getToolkitDirectory()."/opt/.__splpy/common/";

 require "splpy_operator.pm";
 require $cmnDir."/splpy.pm";

 my $module = splpy_Module();
 my $functionName = splpy_FunctionName();
 my $paramStyle = splpy_ParamStyle();
 my $fixedParam = splpy_FixedParam();
 
 my $iport = $model->getInputPortAt(0);
 my $itupleType = $iport->getSPLTupleType();
 my @inames = SPL::CodeGen::Type::getAttributeNames($itupleType);
 my @itypes = SPL::CodeGen::Type::getAttributeTypes($itupleType);

 my $inputAttrs2Py = $iport->getNumberOfAttributes();
 if ($fixedParam != -1) {
    $inputAttrs2Py = $fixedParam;
 }
 if ($fixedParam > $iport->getNumberOfAttributes()) {
   SPL::CodeGen::exitln('%s requires at least %i attributes in input port but schema is %s',
           $model->getContext()->getKind(), $fixedParam, $iport->getSPLTupleType());
 }
 
  my $ituple = $iport->getCppTupleName();
%>

// Constructor
MY_OPERATOR::MY_OPERATOR() :
    function_(NULL),
    pyInNames_(NULL)
{
@include  "../../opt/.__splpy/common/py_constructor.cgt"

<% if ($paramStyle eq 'dictionary') { %>
   {
      streamsx::topology::PyGILLock lock;
      pyInNames_ = streamsx::topology::Splpy::pyAttributeNames(
               getInputPortAt(0));
   }
<% } %>
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
}

// Notify port readiness
void MY_OPERATOR::allPortsReady() 
{
}
 
// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
}

// Processing for source and threaded operators   
void MY_OPERATOR::process(uint32_t idx)
{
}

// Tuple processing for mutating ports 
void MY_OPERATOR::process(Tuple & tuple, uint32_t port)
{
}

// Tuple processing for non-mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
   streamsx::topology::PyGILLock lock;

 @include  "../../opt/.__splpy/common/py_splTupleToFunctionArgs.cgt"
  
    PyObject * pyReturnNone = PyObject_CallObject(function_, pyTuple);

    Py_DECREF(pyTuple);
    if (pyReturnNone == NULL) {
        SPLAPPLOG(L_ERROR, "Fatal error: function failed: " << "<%=$functionName%>", "python");
        streamsx::topology::Splpy::flush_PyErr_Print();
        throw;
    }

    Py_DECREF(pyReturnNone);
}

// Punctuation processing
void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{
}

<%SPL::CodeGen::implementationEpilogue($model);%>
