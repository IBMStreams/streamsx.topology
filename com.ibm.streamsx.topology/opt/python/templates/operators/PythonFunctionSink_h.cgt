/*
 * # Licensed Materials - Property of IBM
 * # Copyright IBM Corp. 2015,2018
 */
<%
require "splpy_operator.pm";
my $pyStateful = splpy_OperatorCallable() eq 'class' ? 1 : 0;
%>
@include "../../opt/.splpy/common/py_state.cgt"

#include "splpy.h"
#include "splpy_pyop.h"

using namespace streamsx::topology;

<%SPL::CodeGen::headerPrologue($model);%>

class MY_OPERATOR : public MY_BASE_OPERATOR
#if SPLPY_OP_STATE_HANDLER == 1
 , public SPL::StateHandler
#endif
{
public:
  MY_OPERATOR();
  virtual ~MY_OPERATOR(); 
  void prepareToShutdown(); 
  void process(Tuple const & tuple, uint32_t port);
  void process(Punctuation const & punct, uint32_t port);

#if SPLPY_OP_STATE_HANDLER == 1
  virtual void checkpoint(SPL::Checkpoint & ckpt);
  virtual void reset(SPL::Checkpoint & ckpt);
  virtual void resetToInitialState();
#endif

private:
    SplpyOp *op() { return pyop_; }

  // Members
    SplpyPyOp *pyop_;
    PyObject *pyInNames_;

#if SPLPY_CALLABLE_STATEFUL == 1
    SPL::Mutex mutex_;
#else
    SPL::Mutex mutex_;
#endif
}; 

<%SPL::CodeGen::headerEpilogue($model);%>

