/*
 * # Licensed Materials - Property of IBM
 * # Copyright IBM Corp. 2015  
 */

#include "splpy_pyop.h"

using namespace streamsx::topology;

<%SPL::CodeGen::headerPrologue($model);%>
<%
  require "splpy_operator.pm";
%>

@include "../../opt/.__splpy/common/py_disallow_cr_trigger.cgt"

<%
  my $oport = $model->getOutputPortAt(0);
%>

class MY_OPERATOR : public MY_BASE_OPERATOR, public DelegatingStateHandler
{
public:
  // Constructor
  MY_OPERATOR();

  // Destructor
  virtual ~MY_OPERATOR(); 

   // Notify port readiness
  void allPortsReady(); 

  // Notify pending shutdown
  void prepareToShutdown(); 

  // Processing for source and threaded operators
  void process(uint32_t idx);

private:

  // Members
    SplpyPyOp *pyop_;
    PyObject *pyOutNames_0;

    SplpyOp *op() { return pyop_; }
    void pySubmitTuplesPort0(PyObject * value);
    void fromPythonToPort0(PyObject * pyTuple);
    void fromPythonDictToPort0(PyObject * pyDict);
    void fromPyTupleToSPLTuple(PyObject *pyDict, <%=$oport->getCppTupleType()%> & otuple);
    void fromPyDictToSPLTuple(PyObject *pyTuple, <%=$oport->getCppTupleType()%> & otuple);

@include "../../opt/.__splpy/common/py_enable_cr.cgt"
    OptionalConsistentRegionContext crContext;
}; 

<%SPL::CodeGen::headerEpilogue($model);%>

