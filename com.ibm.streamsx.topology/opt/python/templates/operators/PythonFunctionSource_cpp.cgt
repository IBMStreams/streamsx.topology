/*
 * # Licensed Materials - Property of IBM
 * # Copyright IBM Corp. 2015  
 */

#include <Python.h>
#include <string>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>

#include "splpy.h"

<%SPL::CodeGen::implementationPrologue($model);%>

<%
 my $cmnDir = $model->getContext()->getToolkitDirectory()."/opt/.__splpy/common/";

 require "splpy_operator.pm";
 require $cmnDir."/splpy.pm";

 my $module = splpy_Module();
 my $functionName = splpy_FunctionName();

 my $iport;
 my $itupleType;
 my @inames;
 my @itypes;
 my $ituple;
 
  my $oport = $model->getOutputPortAt(0);
  my $otupleType = $oport->getSPLTupleType();
  my @onames = SPL::CodeGen::Type::getAttributeNames($otupleType);
  my @otypes = SPL::CodeGen::Type::getAttributeTypes($otupleType);
%>

// Constructor
MY_OPERATOR::MY_OPERATOR() :
   function_(NULL),
   pyOutNames_(NULL)
{
@include  "../../opt/.__splpy/common/py_constructor.cgt"
   
   {
      streamsx::topology::PyGILLock lock;

      // function_ is an instance of the callable class
      // then when called returns an iterable
     function_ = streamsx::topology::Splpy::callFunction(
             "streamsx.spl.runtime", "_splpy_iter_source",
             function_, NULL);   

     pyOutNames_ = streamsx::topology::Splpy::pyAttributeNames(
               getOutputPortAt(0));

     // Now create the wrapper function that converts
     // other types returned by the user's function
     // (e.g. dictionaries) to Python tuples as the
     // decorated operators only handle tuples to
     // simplify the generated code.
     Py_INCREF(pyOutNames_); // callFunction steals the reference
     function_ = streamsx::topology::Splpy::callFunction(
             "streamsx.spl.runtime", "_splpy_to_tuples",
             function_, pyOutNames_);   
   }
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
   streamsx::topology::PyGILLock lock;
   if (function_)
      Py_DECREF(function_);
   if (pyOutNames_)
      Py_DECREF(pyOutNames_);
}

// Notify port readiness
void MY_OPERATOR::allPortsReady()
{
  createThreads(1);
}

// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
    streamsx::topology::PyGILLock lock;
    streamsx::topology::flush_PyErrPyOut();
}

<%
  my $no_tuples_action = "submit(Punctuation::WindowMarker, 0);";
%>

void MY_OPERATOR::process(uint32_t idx)
{
  while(!getPE().getShutdownRequested()) {

    std::vector<OPort0Type> output_tuples;  
    {
      // Don't hold the lock across submission
      streamsx::topology::PyGILLock lock;

      PyObject *pyTuple = PyTuple_New(0);
      PyObject *pyDict = NULL;

@include  "../../opt/.__splpy/common/py_functionReturnToTuples.cgt"
    }
 
    for(int i = 0; i < output_tuples.size();i++)
       submit(output_tuples[i], 0);   
  }
}

// Create member function that converts Python tuple to SPL tuple
@include  "../../opt/.__splpy/common/py_pyTupleTosplTuple.cgt"

<%SPL::CodeGen::implementationEpilogue($model);%>
