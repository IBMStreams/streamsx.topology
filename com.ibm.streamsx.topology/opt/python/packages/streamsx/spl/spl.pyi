# coding=utf-8
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2017,2019
from typing import Any, Callable, Iterable

class source:
    def __init__(self, docpy: bool) -> None: ...
    def __call__(self, wrapped: Callable[[], Iterable[Any]]) -> Callable[[], Iterable[Any]]: ...


class map:
    def __init__(self, style: Any=None, docpy: bool) -> None: ...
    def __call__(self, wrapped: Callable[[Any], Any]) -> Callable[[Any], Any]: ...


class filter(object):
    def __init__(self, style: Any=None, docpy: bool) -> None: ...
    def __call__(self, wrapped: Callable[[Any], bool]) -> Callable[[Any], bool]: ...
 
def ignore(wrapped: Any) -> Any: ...

class for_each:
    def __init__(self, style: Any=None, docpy: bool) -> None: ...
    def __call__(self, wrapped: Callable[[Any],None]) -> Callable[[Any],None]: ...
 
class primitive_operator(object):
    def __init__(self, style: Any=None, docpy: Any=bool) -> None: ...
    def __call__(self, wrapped: Any) -> Any: ...
