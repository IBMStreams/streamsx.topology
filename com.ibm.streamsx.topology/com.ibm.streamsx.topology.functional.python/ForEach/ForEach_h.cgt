@include "../py_pystateful.cgt"
@include "../../opt/python/codegen/py_state.cgt"

#include "splpy.h"
#include "splpy_funcop.h"

using namespace streamsx::topology;

<%SPL::CodeGen::headerPrologue($model);%>

<%
my $writePunctuations = $model->getParameterByName("writePunctuations");
$writePunctuations = $writePunctuations ?  $writePunctuations->getValueAt(0)->getSPLExpression() eq "true" : 0;
my $processPunctuations = $model->getParameterByName("processPunctuations");
$processPunctuations = $processPunctuations ?  $processPunctuations->getValueAt(0)->getSPLExpression() eq "true" : 0;
my $processPunct = $writePunctuations | $processPunctuations;
%>

class MY_OPERATOR : public MY_BASE_OPERATOR
#if SPLPY_OP_STATE_HANDLER == 1
 , public SPL::StateHandler
#endif
{
public:
  MY_OPERATOR();
  virtual ~MY_OPERATOR(); 
  void prepareToShutdown(); 
  void process(Tuple const & tuple, uint32_t port);
<%if ($processPunct) {%>
  void process(Punctuation const & punct, uint32_t port);
<%}%>

#if SPLPY_OP_STATE_HANDLER == 1
  virtual void checkpoint(SPL::Checkpoint & ckpt);
  virtual void reset(SPL::Checkpoint & ckpt);
  virtual void resetToInitialState();
#endif

private:
  SplpyOp * op() { return funcop_; }
  
  // Members
  // Control for interaction with Python
  SplpyFuncOp *funcop_;
  
  PyObject *pyInStyleObj_;

#if SPLPY_CALLABLE_STATEFUL == 1
    SPL::Mutex mutex_;
#else
<%if ($processPunct) {%>
    SPL::Mutex mutex_; // processPunct
<%} else {%>
    // processPunct is false
<%}%>
#endif
}; 

<%SPL::CodeGen::headerEpilogue($model);%>

