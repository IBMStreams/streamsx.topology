/* Additional includes go here */

#include <Python.h>
#include <string>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <memory>

#include "splpy.h"

<%SPL::CodeGen::implementationPrologue($model);%>

<%
  # determine which tuple stype is being used
  my $fpdir = $model->getContext()->getToolkitDirectory()."/com.ibm.streamsx.topology.functional.python";
 require $fpdir."/pyfunction.pm";
 my $pystyle = splpy_tuplestyle($model->getInputPortAt(0));
%>

// Constructor
MY_OPERATOR::MY_OPERATOR() : function_(NULL)
{ 
  std::string tkDir = ProcessingElement::pe().getToolkitDirectory();
  std::string streamsxDir = tkDir + "/opt/python/packages/streamsx/topology";
  std::string splpySetup = streamsxDir + "/splpy_setup.py";
  const char* spl_setup_py = splpySetup.c_str();

  streamsx::topology::Splpy::loadCPython(spl_setup_py);

  streamsx::topology::PyGILLock lock;

    PyObject *_module_;
    PyObject *_function_;

    std::string appDirSetup = "import streamsx.topology.runtime\n";
    appDirSetup += "streamsx.topology.runtime.setupOperator(\"";
    appDirSetup += ProcessingElement::pe().getApplicationDirectory();
    appDirSetup += "\")\n";

    const char* spl_setup_appdir = appDirSetup.c_str();
    if (PyRun_SimpleString(spl_setup_appdir) != 0) {
         SPLAPPTRC(L_ERROR, "Python script splpy_setup.py failed!", "python");
         streamsx::topology::Splpy::flush_PyErr_Print();
         throw;
    }

<%
 # Select the Python wrapper function
 my $pywrapfunc= $pystyle . '_in__pickle_iter';
%>
@include "../pywrapfunction.cgt"
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
    // Finalization code goes here
    if (function_) {
      streamsx::topology::PyGILLock lock;
      if (function_) {
        Py_DECREF(function_);
      }
    }
}

// Notify port readiness
void MY_OPERATOR::allPortsReady() 
{
}
 
// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
    // This is an asynchronous call
}

// Processing for source and threaded operators   
void MY_OPERATOR::process(uint32_t idx)
{
}

// Tuple processing for mutating ports 
void MY_OPERATOR::process(Tuple & tuple, uint32_t port)
{
}

// Tuple processing for non-mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
  IPort0Type const &ip = static_cast<IPort0Type const &>(tuple);

<%
print splpy_inputtuple2value($pystyle);
%>
  
  std::vector<OPort0Type> output_tuples; 
  
  {
    streamsx::topology::PyGILLock lock;

<%
 if ($pystyle eq 'pickle') {
%>
    // convert spl blob to bytes
    PyObject * pyArg = streamsx::topology::Splpy::pyBlobToBytes(value);
<%
 }
 if ($pystyle eq 'json') {
%>
    // convert spl rstring to Python Unicode string
    PyObject * pyArg = streamsx::topology::Splpy::pyRstringToUnicode(value);
<%
 }
%>

    PyObject * pyIterator = streamsx::topology::Splpy::pyTupleFunc(function_, pyArg);

    if (pyIterator == 0) {
      streamsx::topology::Splpy::flush_PyErr_Print();
      throw;
    }
    if (pyIterator == Py_None) {
        Py_DECREF(pyIterator);
        return;
    }
        
    PyObject * item;
    while (!getPE().getShutdownRequested()
          &&  ((item = PyIter_Next(pyIterator)) != NULL) ) {

      // construct spl blob and tuple from pickled return value
      long int size = PyBytes_Size(item);
      char * bytes = PyBytes_AsString(item);
      OPort0Type otuple;
      otuple.get___spl_po().setData((const unsigned char *)bytes, size);
      Py_DECREF(item); 
      output_tuples.push_back(otuple);
    }
    Py_DECREF(pyIterator);
  } // end lock
  
  // submit tuples
  for(int i = 0; i < output_tuples.size() && !getPE().getShutdownRequested(); i++) {
    submit(output_tuples[i], 0);
  } 
  
}

// Punctuation processing
void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{
}
<%SPL::CodeGen::implementationEpilogue($model);%>
