/* Additional includes go here */

#include "splpy.h"
#include "splpy_funcop.h"

using namespace streamsx::topology;

<%SPL::CodeGen::implementationPrologue($model);%>

@include "../pyspltuple.cgt"
<%
 # Select the Python wrapper function
 my $pywrapfunc= $pystyle . '_in__pickle_iter';
%>

// Constructor
MY_OPERATOR::MY_OPERATOR() :
   funcop_(NULL),
   pyInNames_(NULL)
{ 
    funcop_ = new SplpyFuncOp(this, "<%=$pywrapfunc%>");

<% if ($pystyle eq 'dict') { %>
     SplpyGIL lock;
 
     pyInNames_ = streamsx::topology::Splpy::pyAttributeNames(
               getInputPortAt(0));
<% } %>
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
<% if ($pystyle eq 'dict') { %>
    if (pyInNames_) {
      SplpyGIL lock;
      Py_DECREF(pyInNames_);
    }
<% } %>

  delete funcop_;
}

// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
    funcop_->prepareToShutdown();
}

// Tuple processing for non-mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
  IPort0Type const &ip = static_cast<IPort0Type const &>(tuple);

<%
print splpy_inputtuple2value($pystyle);
%>
  
  std::vector<OPort0Type> output_tuples; 
  
  {
<%if ($pystyle eq 'dict') {%>
@include "../pyspltuple2dict.cgt"
<%}%>

    SplpyGIL lock;
    // convert spl attribute to python object
    PyObject * pyArg = streamsx::topology::pySplValueToPyObject(value);

    PyObject * pyIterator = streamsx::topology::Splpy::pyTupleFunc(funcop_->callable(), pyArg);

    if (pyIterator == 0) {
         throw SplpyGeneral::pythonException(
               getParameterValues("pyName").at(0)->getValue().toString());
    }
    if (SplpyGeneral::isNone(pyIterator)) {
        Py_DECREF(pyIterator);
        return;
    }
        
    PyObject * item;
    while (!getPE().getShutdownRequested()
          &&  ((item = PyIter_Next(pyIterator)) != NULL) ) {

      // construct spl blob and tuple from pickled return value
      OPort0Type otuple;
      pySplValueFromPyObject(otuple.get___spl_po(), item);
      Py_DECREF(item); 
      output_tuples.push_back(otuple);
    }
    Py_DECREF(pyIterator);
  } // end lock
  
  // submit tuples
  for(int i = 0; i < output_tuples.size() && !getPE().getShutdownRequested(); i++) {
    submit(output_tuples[i], 0);
  } 
  
}

<%SPL::CodeGen::implementationEpilogue($model);%>
