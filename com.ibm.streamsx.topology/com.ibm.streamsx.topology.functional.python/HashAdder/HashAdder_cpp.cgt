/* Additional includes go here */

#include "splpy.h"
#include "splpy_funcop.h"

using namespace streamsx::topology;

<%SPL::CodeGen::implementationPrologue($model);%>

@include "../pyspltuple.cgt"
<%
 # Select the Python wrapper function
 my $pywrapfunc= $pystyle_fn . '_in';
%>

// Constructor
MY_OPERATOR::MY_OPERATOR() :
   funcop_(NULL),
   pyInStyleObj_(NULL),
   crContext(this)
{
    funcop_ = new SplpyFuncOp(this, "<%=$pywrapfunc%>");

@include "../pyspltuple_constructor.cgt"
}


// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
    if (pyInStyleObj_) {
      SplpyGIL lock;
      Py_DECREF(pyInStyleObj_);
    }

    delete funcop_;
}

// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
    OptionalAutoLock lock(this);
    funcop_->prepareToShutdown();
}

// Tuple processing for non-mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
try {
@include "../pyspltuple2value.cgt"

  OptionalAutoLock stateLock(this);
<%if ($pystyle_fn eq 'dict' || $pystyle_fn eq 'tuple') {%>

  OPort0Type otuple;
  otuple.assignFrom(<%=$iport->getCppTupleName()%>, false);
  otuple.set___spl_hash(streamsx::topology::Splpy::pyTupleHash(funcop_->callable(), value));

<%} else { %>

  // value is the first matching attribute and an SPL:: reference
  OPort0Type otuple(value,
       streamsx::topology::Splpy::pyTupleHash(funcop_->callable(), value));
<%}%>

  // submit tuple
  submit(otuple, 0);
} catch (const streamsx::topology::SplpyExceptionInfo& excInfo) {
  SPLPY_OP_HANDLE_EXCEPTION_INFO_GIL(excInfo);
}
}

void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{
   OptionalAutoLock stateLock(this);
   forwardWindowPunctuation(punct);
}

<%SPL::CodeGen::implementationEpilogue($model);%>
